<!DOCTYPE html><html lang="ja"><head><meta http-equiv="Content-Security-Policy" content="default-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob: https://cdnjs.cloudflare.com https://cdn.jsdelivr.net https://code.jquery.com https://unpkg.com https://d3js.org https://threejs.org https://cdn.plot.ly https://stackpath.bootstrapcdn.com https://maps.googleapis.com https://cdn.tailwindcss.com https://ajax.googleapis.com https://kit.fontawesome.com https://cdn.datatables.net https://maxcdn.bootstrapcdn.com https://code.highcharts.com https://tako-static-assets-production.s3.amazonaws.com https://www.youtube.com https://fonts.googleapis.com https://fonts.gstatic.com https://pfst.cf2.poecdn.net https://puc.poecdn.net https://i.imgur.com https://wikimedia.org https://*.icons8.com https://*.giphy.com https://picsum.photos https://images.unsplash.com; frame-src 'self' https://www.youtube.com https://trytako.com; child-src 'self'; manifest-src 'self'; worker-src 'self'; upgrade-insecure-requests; block-all-mixed-content;">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Japanese Grammar Explorer</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    colors: {
                        primary: '#5D5CDE',
                        'primary-dark': '#4A49B8',
                        'bg-light': '#FFFFFF',
                        'bg-dark': '#181818',
                        'jlpt-blue': '#1E40AF',
                        'jlpt-blue-dark': '#1E3A8A',
                        'jlpt-red': '#dc2626',
                    }
                }
            }
        }
    </script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;500;700&family=VT323&family=Orbitron:wght@400;500;700;900&family=Press+Start+2P&display=swap');
        
        :root {
            --neon-pink: #ff00ff;
            --neon-blue: #00ffff;
            --neon-purple: #9900ff;
            --dark-purple: #170036;
            --dark-bg: #0c0014;
            --grid-color: rgba(120, 0, 170, 0.15);
            --jlpt-blue: #1E40AF;
            --jlpt-red: #dc2626;
        }
        
        body {
            font-family: 'Orbitron', 'Noto Sans JP', sans-serif;
            transition: background-color 0.3s ease, color 0.3s ease;
            background-color: var(--dark-bg);
            color: #fff;
            background-image: 
                linear-gradient(var(--grid-color) 1px, transparent 1px),
                linear-gradient(90deg, var(--grid-color) 1px, transparent 1px);
            background-size: 20px 20px;
            overflow-x: hidden;
        }
        
        body::before {
            content: "";
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(to bottom, rgba(255, 0, 255, 0.05), rgba(0, 255, 255, 0.05));
            pointer-events: none;
            z-index: -1;
        }
        
        /* Scanline effect */
        body::after {
            content: "";
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: repeating-linear-gradient(
                0deg,
                rgba(0, 0, 0, 0.15),
                rgba(0, 0, 0, 0.15) 1px,
                transparent 1px,
                transparent 2px
            );
            pointer-events: none;
            z-index: 9999;
            opacity: 0.3;
        }
        
        h1, h2, h3, button, .option {
            font-family: 'Orbitron', sans-serif;
            letter-spacing: 1px;
        }
        
        .neon-text {
            color: #fff;
            text-shadow: 
                0 0 5px #fff,
                0 0 10px var(--neon-pink),
                0 0 20px var(--neon-pink),
                0 0 40px var(--neon-pink);
        }
        
        .grammar-card {
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            border: 1px solid rgba(255, 0, 255, 0.3);
            background: rgba(15, 0, 30, 0.7);
            box-shadow: 
                0 0 5px rgba(255, 0, 255, 0.5),
                0 0 20px rgba(255, 0, 255, 0.2);
            backdrop-filter: blur(5px);
        }
        
        .grammar-card:hover {
            transform: translateY(-3px) scale(1.01);
            box-shadow: 
                0 0 10px rgba(255, 0, 255, 0.7),
                0 0 30px rgba(255, 0, 255, 0.3);
        }
        
        .jlpt-card {
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            border: 1px solid rgba(30, 64, 175, 0.3);
            background: rgba(15, 0, 30, 0.7);
            box-shadow: 
                0 0 5px rgba(30, 64, 175, 0.5),
                0 0 20px rgba(30, 64, 175, 0.2);
            backdrop-filter: blur(5px);
        }
        
        .toggle-btn {
            position: relative;
            color: var(--neon-blue);
            font-weight: 500;
            overflow: hidden;
            transition: all 0.3s;
        }
        
        .toggle-btn:hover {
            text-shadow: 0 0 5px var(--neon-blue);
        }
        
        /* Quiz style */
        .option {
            transition: all 0.3s ease;
            border: 1px solid rgba(0, 255, 255, 0.3);
            background: rgba(10, 0, 20, 0.7);
            box-shadow: 0 0 5px rgba(0, 255, 255, 0.1);
            position: relative;
            overflow: hidden;
        }
        
        .option:hover:not(.correct):not(.incorrect) {
            border-color: var(--neon-blue);
            box-shadow: 
                0 0 10px rgba(0, 255, 255, 0.5),
                0 0 20px rgba(0, 255, 255, 0.2);
            background: rgba(20, 10, 35, 0.8);
        }
        
        .option::before {
            content: '';
            position: absolute;
            top: -10px;
            left: -10px;
            width: calc(100% + 20px);
            height: calc(100% + 20px);
            background: linear-gradient(45deg, transparent, rgba(0, 255, 255, 0.1), transparent);
            transform: translateX(-100%);
            transition: transform 0.6s;
            z-index: -1;
        }
        
        .option:hover::before {
            transform: translateX(100%);
        }
        
        .correct {
            background: rgba(0, 50, 20, 0.7) !important;
            border-color: rgba(0, 255, 100, 0.8) !important;
            box-shadow: 
                0 0 10px rgba(0, 255, 100, 0.5),
                0 0 20px rgba(0, 255, 100, 0.3) !important;
        }
        
        .incorrect {
            background: rgba(50, 10, 10, 0.7) !important;
            border-color: rgba(255, 50, 50, 0.8) !important;
            box-shadow: 
                0 0 10px rgba(255, 50, 50, 0.5),
                0 0 20px rgba(255, 50, 50, 0.3) !important;
        }
        
        /* UI Elements */
        .bg-white {
            background-color: rgba(15, 0, 30, 0.7) !important;
            border: 1px solid rgba(153, 0, 255, 0.3);
            box-shadow: 0 0 15px rgba(153, 0, 255, 0.2);
        }
        
        .dark .bg-gray-800 {
            background-color: rgba(15, 0, 30, 0.7) !important;
        }
        
        input {
            background-color: rgba(20, 10, 35, 0.7) !important;
            border-color: rgba(0, 255, 255, 0.3) !important;
            color: white !important;
        }
        
        input:focus {
            box-shadow: 0 0 10px rgba(0, 255, 255, 0.5) !important;
            border-color: rgba(0, 255, 255, 0.8) !important;
        }
        
        button {
            position: relative;
            overflow: hidden;
            transition: all 0.3s;
            z-index: 1;
        }
        
        .bg-primary {
            background: linear-gradient(45deg, var(--neon-purple), var(--neon-pink)) !important;
            border: none !important;
            box-shadow: 0 0 10px rgba(255, 0, 255, 0.5);
        }
        
        .bg-primary:hover {
            box-shadow: 0 0 15px rgba(255, 0, 255, 0.8);
            transform: translateY(-2px);
        }
        
        .bg-jlpt-blue {
            background: linear-gradient(45deg, var(--jlpt-blue), #2563eb) !important;
            border: none !important;
            box-shadow: 0 0 10px rgba(30, 64, 175, 0.5);
        }
        
        .bg-jlpt-blue:hover {
            box-shadow: 0 0 15px rgba(30, 64, 175, 0.8);
            transform: translateY(-2px);
        }
        
        /* Retro Japanese symbol decoration */
        @keyframes float {
            0% { transform: translateY(0) rotate(0deg); opacity: 0.3; }
            50% { transform: translateY(-15px) rotate(5deg); opacity: 0.5; }
            100% { transform: translateY(0) rotate(0deg); opacity: 0.3; }
        }
        
        .symbol {
            position: fixed;
            color: rgba(255, 255, 255, 0.1);
            font-family: 'Noto Sans JP', sans-serif;
            font-size: 150px;
            pointer-events: none;
            z-index: -1;
            animation: float 10s infinite ease-in-out;
        }
        
        .symbol:nth-child(1) {
            top: 10%;
            left: 5%;
            animation-delay: 0s;
        }
        
        .symbol:nth-child(2) {
            top: 60%;
            right: 5%;
            animation-delay: -3s;
        }
        
        .symbol:nth-child(3) {
            bottom: 10%;
            left: 20%;
            animation-delay: -6s;
        }
        
        /* Dark mode is always on in the retro theme */
        .dark {
            color: white;
        }
        
        /* Text colors */
        .text-gray-900, .text-gray-700, .text-gray-600 {
            color: rgba(255, 255, 255, 0.9) !important;
        }
        
        .text-gray-300, .text-gray-400, .text-gray-500 {
            color: rgba(255, 255, 255, 0.6) !important;
        }
        
        .text-primary, .dark .text-primary {
            color: var(--neon-blue) !important;
            text-shadow: 0 0 5px rgba(0, 255, 255, 0.5);
        }
        
        /* Quiz feedback */
        #quizFeedback {
            background: rgba(20, 10, 35, 0.7);
            border: 1px solid rgba(153, 0, 255, 0.3);
            box-shadow: 0 0 10px rgba(153, 0, 255, 0.2);
        }
        
        .text-green-600, .text-green-400, .dark .text-green-400 {
            color: rgb(0, 255, 170) !important;
            text-shadow: 0 0 5px rgba(0, 255, 170, 0.5);
        }
        
        .text-red-600, .text-red-400, .dark .text-red-400 {
            color: rgb(255, 70, 70) !important;
            text-shadow: 0 0 5px rgba(255, 70, 70, 0.5);
        }
        
        /* Cursor */
        * {
            cursor: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' style='fill:rgb(0,255,255);'><polygon points='0,0 8,16 16,0'/></svg>") 8 0, auto !important;
        }
        
        button, a, .option, input, .toggle-btn {
            cursor: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' style='fill:rgb(255,0,255);'><circle cx='12' cy='12' r='8'/></svg>") 12 12, pointer !important;
        }
        
        /* JLPT Specific Styles */
        .tab-active {
            color: white;
            border-bottom: 3px solid #00ffff;
            text-shadow: 0 0 10px rgba(0, 255, 255, 0.5);
        }
        
        /* Progress bar */
        .progress-bar {
            height: 8px;
            background-color: rgba(30, 64, 175, 0.3);
            border-radius: 4px;
            overflow: hidden;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #1E40AF, #3B82F6);
            border-radius: 4px;
            transition: width 0.3s ease;
        }
        
        /* Timer */
        .timer {
            font-family: 'Orbitron', monospace;
            text-shadow: 0 0 10px rgba(0, 255, 255, 0.5);
        }
        
        /* Furigana styling */
        ruby {
            display: ruby;
            ruby-position: over;
            ruby-align: center;
            margin: 0;
            padding: 0;
            line-height: 2.2;
            text-align: center;
        }
        
        rt {
            font-size: 0.5em;
            color: rgba(255, 255, 255, 0.85);
            line-height: 1;
            text-align: center;
            margin-bottom: 0.3em;
        }
    </style>
</head>
<body class="bg-bg-light dark:bg-bg-dark text-gray-900 dark:text-gray-100 min-h-screen">
    <!-- Floating Japanese symbols -->
    <div class="symbol">日</div>
    <div class="symbol">本</div>
    <div class="symbol">語</div>
    <div class="symbol">文</div>
    <div class="symbol">法</div>
    
    <div id="app" class="container mx-auto px-4 py-8 max-w-4xl">
        <!-- Main App Header -->
        <header id="main-header" class="mb-8">
            <div class="flex justify-between items-center">
                <div class="glitch-container overflow-hidden">
                    <h1 class="text-3xl md:text-4xl font-bold glitch-text">日本語の文法
                        <span class="text-gray-300 text-2xl block md:inline mt-1 md:mt-0 md:ml-2">NIHONGO SYNTAX</span>
                    </h1>
                </div>
                <button id="themeBtn" class="p-2 rounded border border-neon-pink focus:outline-none bg-transparent text-white">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M14 8H10V10H14V8Z" fill="#00FFFF"></path>
                        <path d="M14 14H10V16H14V14Z" fill="#00FFFF"></path>
                        <path d="M8 10H4V14H8V10Z" fill="#FF00FF"></path>
                        <path d="M20 10H16V14H20V10Z" fill="#FF00FF"></path>
                        <path d="M14 4H10V8H14V4Z" fill="#FF00FF"></path>
                        <path d="M14 16H10V20H14V16Z" fill="#FF00FF"></path>
                    </svg>
                </button>
            </div>
            
            <style>
                /* Glitch effect */
                .glitch-text {
                    position: relative;
                    color: white;
                    text-shadow: 
                        0 0 5px rgba(255, 255, 255, 0.8),
                        0 0 10px rgba(0, 255, 255, 0.5);
                    animation: glitch-animation 5s infinite;
                }
                
                @keyframes glitch-animation {
                    0% {
                        text-shadow: 0 0 5px rgba(255, 255, 255, 0.8), 0 0 10px rgba(0, 255, 255, 0.5);
                        transform: translateX(0) skewX(0);
                    }
                    2% {
                        text-shadow: -3px 0 0 rgba(255, 0, 255, 0.7), 3px 0 0 rgba(0, 255, 255, 0.7);
                        transform: translateX(2px) skewX(3deg);
                    }
                    4% {
                        text-shadow: 3px 0 0 rgba(255, 0, 255, 0.7), -3px 0 0 rgba(0, 255, 255, 0.7);
                        transform: translateX(-2px) skewX(-3deg);
                    }
                    5% {
                        text-shadow: 0 0 5px rgba(255, 255, 255, 0.8), 0 0 10px rgba(0, 255, 255, 0.5);
                        transform: translateX(0) skewX(0);
                    }
                    40% {
                        text-shadow: 0 0 5px rgba(255, 255, 255, 0.8), 0 0 10px rgba(0, 255, 255, 0.5);
                        transform: translateX(0) skewX(0);
                    }
                    42% {
                        text-shadow: -2px 0 0 rgba(255, 0, 255, 0.7), 2px 0 0 rgba(0, 255, 255, 0.7);
                        transform: translateX(1px);
                    }
                    43% {
                        text-shadow: 2px 0 0 rgba(255, 0, 255, 0.7), -2px 0 0 rgba(0, 255, 255, 0.7);
                        transform: translateX(-1px);
                    }
                    45% {
                        text-shadow: 0 0 5px rgba(255, 255, 255, 0.8), 0 0 10px rgba(0, 255, 255, 0.5);
                        transform: translateX(0) skewX(0);
                    }
                    100% {
                        text-shadow: 0 0 5px rgba(255, 255, 255, 0.8), 0 0 10px rgba(0, 255, 255, 0.5);
                        transform: translateX(0) skewX(0);
                    }
                }
            </style>
            <div class="mt-4 flex flex-col gap-4">
                <div class="relative">
                    <input type="text" id="search" placeholder="Search grammar points..." class="w-full p-4 pl-11 rounded-lg border border-gray-300 dark:border-gray-700 
                                  bg-white dark:bg-gray-800 focus:outline-none focus:ring-2 
                                  focus:ring-primary text-base">
                    <svg class="w-6 h-6 text-gray-500 dark:text-gray-400 absolute left-3 top-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                    </svg>
                </div>
                <div class="grid grid-cols-5 gap-2">
                    <button id="studyBtn" class="bg-primary hover:bg-primary-dark text-white font-medium py-4 px-4 rounded-lg transition duration-200 focus:outline-none text-center">
                        Study
                    </button>
                    <button id="quizBtn" class="bg-white dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-900 dark:text-white font-medium py-4 px-4 rounded-lg border border-gray-300 dark:border-gray-700 transition duration-200 focus:outline-none text-center">
                        Quiz
                    </button>
                    <button id="jlptBtn" class="bg-white dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-900 dark:text-white font-medium py-4 px-4 rounded-lg border border-gray-300 dark:border-gray-700 transition duration-200 focus:outline-none text-center">
                        JLPT N5
                    </button>
                    <button id="kanjiBtn" class="bg-white dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-900 dark:text-white font-medium py-4 px-4 rounded-lg border border-gray-300 dark:border-gray-700 transition duration-200 focus:outline-none text-center">
                        N5 Kanji
                    </button>
                    <button id="notesBtn" class="bg-white dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-900 dark:text-white font-medium py-4 px-4 rounded-lg border border-gray-300 dark:border-gray-700 transition duration-200 focus:outline-none text-center">
                        My Notes
                    </button>
                </div>
            </div>
        </header>
        
        <!-- JLPT Test Configuration Modal (initially hidden) -->
        <div id="jlpt-config-modal" class="fixed inset-0 flex items-center justify-center z-50 hidden">
            <div class="absolute inset-0 bg-black opacity-70"></div>
            <div class="bg-opacity-90 bg-gray-900 rounded-xl p-8 max-w-md w-full z-10 border border-blue-500 shadow-lg shadow-blue-500/20">
                <h2 class="text-2xl font-bold mb-6 text-center" style="text-shadow: 0 0 5px rgba(0, 255, 255, 0.5);">
                    JLPT N5 <span class="text-blue-500">模擬試験設定</span>
                </h2>
                
                <div class="space-y-6 mb-8">
                    <div>
                        <label class="font-medium block mb-2">言語知識 (文法・語彙)</label>
                        <div class="flex items-center">
                            <input type="range" id="languageKnowledgeCount" min="1" max="10" value="5" class="w-full h-2 bg-blue-900 rounded-lg appearance-none cursor-pointer">
                            <span id="languageKnowledgeValue" class="ml-4 text-lg min-w-[2ch]">5</span>
                        </div>
                    </div>
                    
                    <div>
                        <label class="font-medium block mb-2">読解 (Reading)</label>
                        <div class="flex items-center">
                            <input type="range" id="readingCount" min="1" max="4" value="2" class="w-full h-2 bg-blue-900 rounded-lg appearance-none cursor-pointer">
                            <span id="readingValue" class="ml-4 text-lg min-w-[2ch]">2</span>
                        </div>
                    </div>
                    
                    <div>
                        <label class="font-medium block mb-2">聴解 (Listening)</label>
                        <div class="flex items-center">
                            <input type="range" id="listeningCount" min="1" max="4" value="2" class="w-full h-2 bg-blue-900 rounded-lg appearance-none cursor-pointer">
                            <span id="listeningValue" class="ml-4 text-lg min-w-[2ch]">2</span>
                        </div>
                    </div>
                    
                    <div>
                        <label class="font-medium block mb-2">試験時間 (Test Time)</label>
                        <div class="flex items-center">
                            <input type="range" id="testTimeCount" min="5" max="30" value="15" step="5" class="w-full h-2 bg-blue-900 rounded-lg appearance-none cursor-pointer">
                            <span id="testTimeValue" class="ml-4 text-lg min-w-[4ch]">15分</span>
                        </div>
                    </div>
                </div>
                
                <div class="flex justify-between">
                    <button id="cancelTestBtn" class="px-4 py-2 rounded border border-gray-500 text-gray-300 hover:bg-gray-800">
                        キャンセル
                    </button>
                    <button id="startTestBtn" class="bg-jlpt-blue text-white px-6 py-2 rounded-lg hover:bg-jlpt-blue-dark">
                        開始
                    </button>
                </div>
            </div>
        </div>
        
        <!-- JLPT Test Header (initially hidden) -->
        <header id="jlpt-header" class="mb-8 hidden">
            <div class="flex justify-between items-center">
                <div>
                    <h1 class="text-3xl md:text-4xl font-bold" style="text-shadow: 0 0 5px rgba(0, 255, 255, 0.5);">
                        JLPT N5 <span class="text-blue-500">模擬試験</span>
                    </h1>
                </div>
                <button id="backToMainBtn" class="p-2 rounded border border-blue-500 focus:outline-none bg-transparent text-white">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path d="M19 12H5M5 12L12 19M5 12L12 5" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                    </svg>
                </button>
            </div>
            
            <!-- Test navigation tabs -->
            <div class="flex flex-wrap border-b border-gray-700 mt-6">
                <button class="tab-btn px-4 py-2 text-lg font-medium tab-active" data-section="language-knowledge">
                    言語知識
                </button>
                <button class="tab-btn px-4 py-2 text-lg font-medium" data-section="reading">
                    読解
                </button>
                <button class="tab-btn px-4 py-2 text-lg font-medium" data-section="listening">
                    聴解
                </button>
            </div>
            
            <!-- Timer and progress bar -->
            <div class="mt-4 flex justify-between items-center">
                <div class="timer text-xl font-bold" style="min-width: 85px;">25:00</div>
                <div class="progress-bar w-full mx-4">
                    <div class="progress-fill" style="width: 0%;"></div>
                </div>
                <div class="question-counter text-lg">1/30</div>
            </div>
        </header>
        
        <!-- Main App Content -->
        <div id="main-content">
            <!-- Study Mode Content -->
            <div id="studyContent" class="grid grid-cols-1 gap-6">
                <!-- Grammar cards will go here -->
            </div>
            
            <!-- Quiz Mode Content -->
            <div id="quizContent" class="hidden">
                <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-5 mb-6">
                    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3 mb-4">
                        <h2 class="text-xl font-bold">Quiz Mode</h2>
                        <div class="flex flex-col sm:flex-row items-center w-full sm:w-auto">
                            <span id="quizScore" class="py-1 px-3 bg-pink-900 bg-opacity-30 rounded-lg text-pink-100 mb-2 sm:mb-0 sm:mr-3">Score: 0/0</span>
                            <button id="newQuizBtn" class="bg-primary hover:bg-primary-dark text-white font-medium py-3 px-4 w-full sm:w-auto rounded-lg transition duration-200 focus:outline-none">
                                New Quiz
                            </button>
                        </div>
                    </div>
                    
                    <div id="quizQuestion" class="mb-6 p-4 border border-pink-500 bg-opacity-20 bg-pink-900 rounded-lg">
                        <p class="text-base font-medium mb-3">What does this grammar pattern mean?</p>
                        <div id="questionText" class="text-xl font-bold mb-4 text-primary" style="text-shadow: 0 0 5px rgba(0, 255, 255, 0.4);"></div>
                        <div id="questionExample" class="mb-3 text-lg leading-relaxed"></div>
                    </div>
                    
                    <div id="quizOptions" class="grid grid-cols-1 gap-3">
                        <!-- Options will be generated here -->
                    </div>
                    
                    <div id="quizFeedback" class="hidden mt-5 p-4 rounded-lg"></div>
                    
                    <div id="nextQuestionBtn" class="hidden mt-5">
                        <button class="bg-primary hover:bg-primary-dark text-white font-medium py-4 px-6 w-full rounded-lg transition duration-200">
                            Next Question
                        </button>
                    </div>
                </div>
            </div>
            
            <!-- My Notes Mode Content -->
            <div id="notesContent" class="hidden">
                <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-5 mb-6">
                    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3 mb-4">
                        <h2 class="text-xl font-bold">My Practice Notes</h2>
                        <div class="flex items-center gap-2">
                            <select id="notesFilterSelect" class="px-4 py-2 rounded-lg bg-opacity-30 bg-purple-900 border border-cyan-500 text-cyan-100 focus:outline-none focus:ring-2 focus:ring-pink-500">
                                <option value="all">All Grammar Points</option>
                                <!-- Grammar point options will be added dynamically -->
                            </select>
                            <button id="clearNotesBtn" class="px-4 py-2 rounded-lg border border-red-500 text-red-300 hover:bg-red-900 hover:bg-opacity-30 transition-all duration-300">
                                Clear All
                            </button>
                        </div>
                    </div>
                    
                    <div id="noNotesMessage" class="hidden text-center py-10">
                        <p class="text-gray-400 text-lg">You haven't saved any practice sentences yet.</p>
                        <p class="text-gray-400 mt-2">Try the Quiz mode and create some practice sentences!</p>
                    </div>
                    
                    <div id="notesContainer" class="space-y-4">
                        <!-- Notes will be dynamically added here -->
                    </div>
                </div>
            </div>
            
            <!-- Practice Mode Content -->
            <div id="practiceContent" class="hidden">
                <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-5 mb-6">
                    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3 mb-4">
                        <h2 class="text-xl font-bold">Practice Mode</h2>
                        <div class="flex flex-col sm:flex-row items-center w-full sm:w-auto">
                            <span id="practiceScore" class="py-1 px-3 bg-pink-900 bg-opacity-30 rounded-lg text-pink-100 mb-2 sm:mb-0 sm:mr-3">Score: 0</span>
                            <button id="newPracticeBtn" class="bg-primary hover:bg-primary-dark text-white font-medium py-3 px-4 w-full sm:w-auto rounded-lg transition duration-200 focus:outline-none">
                                New Practice
                            </button>
                        </div>
                    </div>
                    
                    <div id="practiceQuestion" class="mb-6 p-4 border border-cyan-500 bg-opacity-20 bg-cyan-900 rounded-lg">
                        <p class="text-base font-medium mb-2">Reconstruct the Japanese sentence by arranging the words in the correct order:</p>
                        <p id="practiceEnglish" class="text-lg mb-4 text-cyan-300">English sentence will appear here.</p>
                        <div id="practiceGrammarHint" class="text-sm text-gray-400 mb-3">Target grammar: <span class="text-pink-300"></span></div>
                        
                        <div id="wordContainer" class="flex flex-wrap gap-2 mt-4 min-h-16 mb-2">
                            <!-- Words will be added here dynamically -->
                        </div>
                        
                        <div id="answerContainer" class="mt-4 p-3 bg-opacity-20 bg-purple-900 border border-purple-500 rounded-lg min-h-16 flex flex-wrap gap-2">
                            <!-- Selected words will appear here -->
                            <div class="empty-placeholder text-gray-500 text-sm">Drag words here to form a sentence</div>
                        </div>
                    </div>
                    
                    <div class="mt-4 flex justify-between">
                        <button id="clearPracticeBtn" class="px-4 py-2 rounded-lg border border-pink-500 text-pink-300 hover:bg-pink-900 hover:bg-opacity-30 transition-all duration-300">
                            Clear
                        </button>
                        <button id="checkPracticeBtn" class="px-4 py-2 bg-cyan-900 bg-opacity-30 rounded-lg border border-cyan-500 text-cyan-300 hover:bg-cyan-900 hover:bg-opacity-50 transition-all duration-300">
                            Check Answer
                        </button>
                    </div>
                    
                    <div id="practiceFeedback" class="hidden mt-6 p-4 rounded-lg">
                        <!-- Feedback will be shown here -->
                    </div>
                    
                    <div id="nextPracticeBtn" class="hidden mt-5">
                        <button class="bg-primary hover:bg-primary-dark text-white font-medium py-4 px-6 w-full rounded-lg transition duration-200">
                            Next Practice
                        </button>
                    </div>
                </div>
            </div>
            
            <!-- Kanji Flashcard Mode Content -->
            <div id="kanjiContent" class="hidden">
                <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3 mb-6">
                    <h2 class="text-xl font-bold">JLPT N5 Kanji Flashcards</h2>
                    <div class="flex items-center w-full sm:w-auto space-x-3">
                        <span id="kanjiProgress" class="py-1 px-3 bg-pink-900 bg-opacity-30 rounded-lg text-pink-100">Card: 1/15</span>
                        <button id="shuffleKanjiBtn" class="bg-white dark:bg-gray-800 border border-pink-500 text-pink-100 font-medium py-2 px-3 rounded-lg transition duration-200 focus:outline-none">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                            </svg>
                        </button>
                    </div>
                </div>
                
                <div class="flashcard-container perspective w-full max-w-3xl mx-auto">
                    <div id="kanjiCard" class="flashcard w-full h-96 sm:h-[450px] rounded-xl cursor-pointer">
                        <div class="flashcard-inner w-full h-full preserve-3d">
                            <!-- Front of card (Kanji) -->
                            <div class="flashcard-front absolute w-full h-full flex flex-col items-center justify-center border border-pink-500 rounded-xl shadow-lg bg-opacity-90 bg-gray-900 p-8 text-center">
                                <div class="kanji-character text-9xl font-bold mb-6" style="text-shadow: 0 0 30px rgba(255, 0, 255, 0.7);">日</div>
                                <p class="text-lg text-gray-300">Click to flip</p>
                            </div>
                            
                            <!-- Back of card (Details) -->
                            <div class="flashcard-back absolute w-full h-full border border-cyan-500 rounded-xl shadow-lg bg-opacity-90 bg-gray-900 p-6 overflow-y-auto">
                                <div class="flex justify-between items-start mb-4">
                                    <h3 class="text-3xl font-bold">
                                        <span class="kanji-character-back">日</span>
                                        <span class="text-xl ml-2 text-gray-300">ひ / ニチ・ジツ</span>
                                    </h3>
                                    <div class="text-sm py-1 px-2 rounded bg-cyan-900 bg-opacity-50 text-cyan-200">JLPT N5</div>
                                </div>
                                
                                <div class="mb-4">
                                    <p class="text-lg text-cyan-200 font-medium mb-1">Meaning:</p>
                                    <p class="kanji-meaning text-xl">day, sun, Japan</p>
                                </div>
                                
                                <div class="mb-4">
                                    <p class="text-lg text-cyan-200 font-medium mb-1">Readings:</p>
                                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-2">
                                        <div>
                                            <p class="text-gray-300 text-sm">Onyomi (Chinese):</p>
                                            <p class="kanji-onyomi">ニチ、ジツ</p>
                                        </div>
                                        <div>
                                            <p class="text-gray-300 text-sm">Kunyomi (Japanese):</p>
                                            <p class="kanji-kunyomi">ひ、-び、-か</p>
                                        </div>
                                    </div>
                                </div>
                                
                                <div>
                                    <p class="text-lg text-cyan-200 font-medium mb-2">Example Words:</p>
                                    <ul class="kanji-examples space-y-3">
                                        <li class="example-item">
                                            <div class="flex justify-between">
                                                <span class="example-word text-xl">日本</span>
                                                <span class="example-meaning text-gray-300">Japan</span>
                                            </div>
                                            <p class="example-reading text-base text-pink-300">にほん (Nihon)</p>
                                        </li>
                                        <li class="example-item">
                                            <div class="flex justify-between">
                                                <span class="example-word text-xl">今日</span>
                                                <span class="example-meaning text-gray-300">today</span>
                                            </div>
                                            <p class="example-reading text-base text-pink-300">きょう (kyō)</p>
                                        </li>
                                        <li class="example-item">
                                            <div class="flex justify-between">
                                                <span class="example-word text-xl">日曜日</span>
                                                <span class="example-meaning text-gray-300">Sunday</span>
                                            </div>
                                            <p class="example-reading text-base text-pink-300">にちようび (nichiyōbi)</p>
                                        </li>
                                    </ul>
                                </div>
                                
                                <p class="text-center mt-4 text-gray-300">Click to flip back</p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="navigation-buttons flex justify-between mt-8">
                    <button id="prevKanjiBtn" class="prev-btn px-6 py-4 rounded-lg border border-gray-500 text-gray-300">
                        Previous Kanji
                    </button>
                    <button id="nextKanjiBtn" class="next-btn bg-primary text-white px-6 py-4 rounded-lg">
                        Next Kanji
                    </button>
                </div>
                
                <style>
                    /* Flashcard flip effect */
                    .perspective {
                        perspective: 1000px;
                    }
                    
                    .preserve-3d {
                        transform-style: preserve-3d;
                        transition: transform 0.8s;
                    }
                    
                    .flashcard.flipped .flashcard-inner {
                        transform: rotateY(180deg);
                    }
                    
                    .flashcard-front, .flashcard-back {
                        backface-visibility: hidden;
                    }
                    
                    .flashcard-back {
                        transform: rotateY(180deg);
                    }
                    
                    .kanji-character, .kanji-character-back {
                        font-family: 'Noto Sans JP', sans-serif;
                    }
                </style>
            </div>
        </div>
        
        <!-- JLPT Test Content (initially hidden) -->
        <div id="jlpt-content" class="hidden">
            <!-- JLPT test section container -->
            <div id="test-container" class="space-y-6">
                <!-- Language Knowledge Section -->
                <div id="language-knowledge-section" class="active-section">
                    <div class="jlpt-card rounded-xl p-6 mb-6">
                        <h2 class="text-xl font-semibold mb-4">文法・語彙</h2>
                        
                        <div class="current-question" data-question-id="grammar-1">
                            <p class="text-lg mb-1">問題 1: 次の文の（　）に入る最もよいものを、1・2・3・4から一つ選びなさい。</p>
                            
                            <div class="question-text my-4 p-4 bg-opacity-20 bg-blue-900 rounded-lg">
                                <p class="text-xl leading-relaxed" style="text-shadow: 0 0 5px rgba(0, 255, 255, 0.4);">
                                    わたしは 毎日 学校（　）行きます。
                                </p>
                            </div>
                            
                            <div class="options space-y-3 mt-6">
                                <div class="option p-4 rounded-lg cursor-pointer" data-correct="false">
                                    <span class="option-number inline-block w-6 h-6 rounded-full bg-blue-900 text-white text-center mr-2">1</span>
                                    <span class="text-lg">を</span>
                                </div>
                                <div class="option p-4 rounded-lg cursor-pointer" data-correct="true">
                                    <span class="option-number inline-block w-6 h-6 rounded-full bg-blue-900 text-white text-center mr-2">2</span>
                                    <span class="text-lg">に</span>
                                </div>
                                <div class="option p-4 rounded-lg cursor-pointer" data-correct="false">
                                    <span class="option-number inline-block w-6 h-6 rounded-full bg-blue-900 text-white text-center mr-2">3</span>
                                    <span class="text-lg">の</span>
                                </div>
                                <div class="option p-4 rounded-lg cursor-pointer" data-correct="false">
                                    <span class="option-number inline-block w-6 h-6 rounded-full bg-blue-900 text-white text-center mr-2">4</span>
                                    <span class="text-lg">か</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="navigation-buttons flex justify-between mt-4">
                        <button class="prev-btn px-6 py-4 rounded-lg border border-gray-500 text-gray-300 disabled:opacity-50 disabled:cursor-not-allowed" disabled="">
                            前の問題
                        </button>
                        <button class="next-btn bg-jlpt-blue text-white px-6 py-4 rounded-lg">
                            次の問題
                        </button>
                    </div>
                </div>
                
                <!-- Reading Section -->
                <div id="reading-section" class="hidden">
                    <div class="jlpt-card rounded-xl p-6 mb-6">
                        <h2 class="text-xl font-semibold mb-4">読解</h2>
                        
                        <div class="current-question" data-question-id="reading-1">
                            <p class="text-lg mb-1">問題 15: 次の文章を読んで、質問に答えなさい。</p>
                            
                            <div class="reading-text my-4 p-4 bg-opacity-20 bg-blue-900 rounded-lg">
                                <p class="text-lg leading-relaxed" style="text-shadow: 0 0 5px rgba(0, 255, 255, 0.4);">
                                    たなかさんは 東京に 住んでいます。たなかさんは 毎日 会社に 行きます。会社は 駅から 近いです。駅から 会社まで 歩いて 10分です。たなかさんは 毎朝 7時に 家を 出ます。会社は 9時から 始まります。
                                </p>
                            </div>
                            
                            <div class="question my-4">
                                <p class="text-lg font-medium">たなかさんの 会社は どこに ありますか。</p>
                            </div>
                            
                            <div class="options space-y-3 mt-4">
                                <div class="option p-4 rounded-lg cursor-pointer" data-correct="false">
                                    <span class="option-number inline-block w-6 h-6 rounded-full bg-blue-900 text-white text-center mr-2">1</span>
                                    <span class="text-lg">東京に あります</span>
                                </div>
                                <div class="option p-4 rounded-lg cursor-pointer" data-correct="true">
                                    <span class="option-number inline-block w-6 h-6 rounded-full bg-blue-900 text-white text-center mr-2">2</span>
                                    <span class="text-lg">駅から 近い ところに あります</span>
                                </div>
                                <div class="option p-4 rounded-lg cursor-pointer" data-correct="false">
                                    <span class="option-number inline-block w-6 h-6 rounded-full bg-blue-900 text-white text-center mr-2">3</span>
                                    <span class="text-lg">家から 近い ところに あります</span>
                                </div>
                                <div class="option p-4 rounded-lg cursor-pointer" data-correct="false">
                                    <span class="option-number inline-block w-6 h-6 rounded-full bg-blue-900 text-white text-center mr-2">4</span>
                                    <span class="text-lg">7時に 開きます</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="navigation-buttons flex justify-between mt-4">
                        <button class="prev-btn px-6 py-4 rounded-lg border border-gray-500 text-gray-300">
                            前の問題
                        </button>
                        <button class="next-btn bg-jlpt-blue text-white px-6 py-4 rounded-lg">
                            次の問題
                        </button>
                    </div>
                </div>
                
                <!-- Listening Section -->
                <div id="listening-section" class="hidden">
                    <div class="jlpt-card rounded-xl p-6 mb-6">
                        <h2 class="text-xl font-semibold mb-4">聴解</h2>
                        
                        <div class="current-question" data-question-id="listening-1">
                            <p class="text-lg mb-1">問題 25: 会話をよく聞いて、質問に答えなさい。</p>
                            
                            <div class="listening-text my-4 p-4 bg-opacity-20 bg-blue-900 rounded-lg text-center">
                                <div class="conversation text-left max-w-lg mx-auto">
                                    <p class="mb-2"><span class="font-bold">女の人：</span>すみません、<ruby>駅<rt>えき</rt></ruby>はどこですか。</p>
                                    <p class="mb-2"><span class="font-bold">男の人：</span>あそこを<ruby>右<rt>みぎ</rt></ruby>に<ruby>曲<rt>ま</rt></ruby>がって、まっすぐ<ruby>行<rt>い</rt></ruby>くと<ruby>駅<rt>えき</rt></ruby>です。</p>
                                    <p class="mb-2"><span class="font-bold">女の人：</span><ruby>遠<rt>とお</rt></ruby>いですか。</p>
                                    <p class="mb-2"><span class="font-bold">男の人：</span>いいえ、<ruby>歩<rt>ある</rt></ruby>いて5<ruby>分<rt>ふん</rt></ruby>ぐらいです。</p>
                                </div>
                            </div>
                            
                            <div class="question my-4">
                                <p class="text-lg font-medium"><ruby>駅<rt>えき</rt></ruby>まで どのぐらい かかりますか。</p>
                            </div>
                            
                            <div class="options space-y-3 mt-4">
                                <div class="option p-4 rounded-lg cursor-pointer" data-correct="false">
                                    <span class="option-number inline-block w-6 h-6 rounded-full bg-blue-900 text-white text-center mr-2">1</span>
                                    <span class="text-lg">10分</span>
                                </div>
                                <div class="option p-4 rounded-lg cursor-pointer" data-correct="true">
                                    <span class="option-number inline-block w-6 h-6 rounded-full bg-blue-900 text-white text-center mr-2">2</span>
                                    <span class="text-lg">5分ぐらい</span>
                                </div>
                                <div class="option p-4 rounded-lg cursor-pointer" data-correct="false">
                                    <span class="option-number inline-block w-6 h-6 rounded-full bg-blue-900 text-white text-center mr-2">3</span>
                                    <span class="text-lg">15分</span>
                                </div>
                                <div class="option p-4 rounded-lg cursor-pointer" data-correct="false">
                                    <span class="option-number inline-block w-6 h-6 rounded-full bg-blue-900 text-white text-center mr-2">4</span>
                                    <span class="text-lg">30分</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="navigation-buttons flex justify-between mt-4">
                        <button class="prev-btn px-6 py-4 rounded-lg border border-gray-500 text-gray-300">
                            前の問題
                        </button>
                        <button class="next-btn bg-jlpt-blue text-white px-6 py-4 rounded-lg">
                            次の問題
                        </button>
                    </div>
                </div>
                
                <!-- Results Section -->
                <div id="results-section" class="hidden">
                    <div class="jlpt-card rounded-xl p-8 mb-6">
                        <h2 class="text-2xl font-bold mb-4 text-center">テスト結果</h2>
                        
                        <div class="results-summary mb-6">
                            <div class="flex items-center justify-center mb-4">
                                <div class="w-32 h-32 rounded-full border-4 border-blue-500 flex items-center justify-center">
                                    <span class="total-score text-4xl font-bold">0%</span>
                                </div>
                            </div>
                            
                            <p class="text-center text-xl mb-2">
                                <span class="correct-count">0</span>/<span class="total-count">30</span> 正解
                            </p>
                            
                            <p class="pass-fail-message text-center text-xl font-bold"></p>
                        </div>
                        
                        <div class="section-scores grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                            <div class="section-score p-4 border border-blue-500 rounded-lg">
                                <h3 class="text-lg font-semibold mb-2">言語知識</h3>
                                <p><span class="section-correct">0</span>/<span class="section-total">15</span> 正解</p>
                            </div>
                            <div class="section-score p-4 border border-blue-500 rounded-lg">
                                <h3 class="text-lg font-semibold mb-2">読解</h3>
                                <p><span class="section-correct">0</span>/<span class="section-total">5</span> 正解</p>
                            </div>
                            <div class="section-score p-4 border border-blue-500 rounded-lg">
                                <h3 class="text-lg font-semibold mb-2">聴解</h3>
                                <p><span class="section-correct">0</span>/<span class="section-total">10</span> 正解</p>
                            </div>
                        </div>
                        
                        <div class="flex justify-center">
                            <button id="retry-test" class="bg-jlpt-blue text-white px-8 py-4 rounded-lg font-medium text-lg">
                                もう一度
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // =====================================================
        // MAIN APP CODE
        // =====================================================
        
        // Dark mode detection and toggle
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            document.documentElement.classList.add('dark');
        }
        
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {
            if (event.matches) {
                document.documentElement.classList.add('dark');
            } else {
                document.documentElement.classList.remove('dark');
            }
        });
        
        document.getElementById('themeBtn').addEventListener('click', () => {
            // In our cyberpunk theme, we're always in "dark mode" but we can toggle some special effects
            document.body.classList.toggle('alt-theme');
            
            // Add some cool glitch effect when changing themes
            const symbols = document.querySelectorAll('.symbol');
            symbols.forEach(symbol => {
                symbol.style.color = document.body.classList.contains('alt-theme') ? 
                    'rgba(255, 0, 255, 0.1)' : 'rgba(255, 255, 255, 0.1)';
                
                // Add a quick animation
                symbol.style.transform = 'scale(1.5)';
                setTimeout(() => {
                    symbol.style.transform = '';
                }, 300);
            });
        });
        
        // Navigation between main app modes
        document.getElementById('studyBtn').addEventListener('click', () => {
            showMainAppMode('study');
        });
        
        document.getElementById('quizBtn').addEventListener('click', () => {
            showMainAppMode('quiz');
        });
        
        document.getElementById('jlptBtn').addEventListener('click', () => {
            showJLPTMode();
        });
        
        document.getElementById('backToMainBtn').addEventListener('click', () => {
            showMainApp();
        });
        
        function showMainAppMode(mode) {
            // Show main app and hide JLPT test
            document.getElementById('main-header').classList.remove('hidden');
            document.getElementById('jlpt-header').classList.add('hidden');
            document.getElementById('main-content').classList.remove('hidden');
            document.getElementById('jlpt-content').classList.add('hidden');
            
            // Update active button
            const studyBtn = document.getElementById('studyBtn');
            const quizBtn = document.getElementById('quizBtn');
            const jlptBtn = document.getElementById('jlptBtn');
            
            studyBtn.classList.remove('bg-primary', 'text-white');
            quizBtn.classList.remove('bg-primary', 'text-white');
            jlptBtn.classList.remove('bg-primary', 'text-white');
            
            studyBtn.classList.add('bg-white', 'dark:bg-gray-800', 'text-gray-900', 'dark:text-white', 'border', 'border-gray-300', 'dark:border-gray-700');
            quizBtn.classList.add('bg-white', 'dark:bg-gray-800', 'text-gray-900', 'dark:text-white', 'border', 'border-gray-300', 'dark:border-gray-700');
            jlptBtn.classList.add('bg-white', 'dark:bg-gray-800', 'text-gray-900', 'dark:text-white', 'border', 'border-gray-300', 'dark:border-gray-700');
            
            // Show the selected mode
            if (mode === 'study') {
                document.getElementById('studyContent').classList.remove('hidden');
                document.getElementById('quizContent').classList.add('hidden');
                studyBtn.classList.remove('bg-white', 'dark:bg-gray-800', 'text-gray-900', 'dark:text-white', 'border', 'border-gray-300', 'dark:border-gray-700');
                studyBtn.classList.add('bg-primary', 'text-white');
            } else if (mode === 'quiz') {
                document.getElementById('studyContent').classList.add('hidden');
                document.getElementById('quizContent').classList.remove('hidden');
                quizBtn.classList.remove('bg-white', 'dark:bg-gray-800', 'text-gray-900', 'dark:text-white', 'border', 'border-gray-300', 'dark:border-gray-700');
                quizBtn.classList.add('bg-primary', 'text-white');
                
                // Start new quiz when switching to quiz mode
                startNewQuiz();
            }
        }
        
        function showJLPTMode() {
            // Show the configuration modal first
            document.getElementById('jlpt-config-modal').classList.remove('hidden');
            
            // Set up sliders if not already set up
            setupConfigSliders();
            
            // Setup config modal buttons
            document.getElementById('cancelTestBtn').addEventListener('click', () => {
                document.getElementById('jlpt-config-modal').classList.add('hidden');
            });
            
            document.getElementById('startTestBtn').addEventListener('click', () => {
                document.getElementById('jlpt-config-modal').classList.add('hidden');
                
                // Save configuration
                testConfiguration.languageKnowledge = parseInt(document.getElementById('languageKnowledgeCount').value);
                testConfiguration.reading = parseInt(document.getElementById('readingCount').value);
                testConfiguration.listening = parseInt(document.getElementById('listeningCount').value);
                remainingTime = parseInt(document.getElementById('testTimeCount').value) * 60;
                
                // Hide main app and show JLPT test
                document.getElementById('main-header').classList.add('hidden');
                document.getElementById('jlpt-header').classList.remove('hidden');
                document.getElementById('main-content').classList.add('hidden');
                document.getElementById('jlpt-content').classList.remove('hidden');
                
                // Initialize the test with the new configuration
                initTest();
                window.jlptInitialized = true;
            });
        }
        
        function setupConfigSliders() {
            // Set up the range slider value displays
            const sliders = [
                { slider: 'languageKnowledgeCount', value: 'languageKnowledgeValue' },
                { slider: 'readingCount', value: 'readingValue' },
                { slider: 'listeningCount', value: 'listeningValue' },
                { slider: 'testTimeCount', value: 'testTimeValue' }
            ];
            
            sliders.forEach(item => {
                const slider = document.getElementById(item.slider);
                const value = document.getElementById(item.value);
                
                // Set initial value
                value.textContent = slider.value;
                if (item.slider === 'testTimeCount') {
                    value.textContent = `${slider.value}分`;
                }
                
                // Update value when slider changes
                slider.addEventListener('input', function() {
                    if (item.slider === 'testTimeCount') {
                        value.textContent = `${this.value}分`;
                    } else {
                        value.textContent = this.value;
                    }
                });
            });
        }
        
        function showMainApp() {
            // Stop JLPT timer if it's running
            if (window.testTimer) {
                clearInterval(window.testTimer);
            }
            
            // Show main app and hide JLPT test
            document.getElementById('main-header').classList.remove('hidden');
            document.getElementById('jlpt-header').classList.add('hidden');
            document.getElementById('main-content').classList.remove('hidden');
            document.getElementById('jlpt-content').classList.add('hidden');
        }
        
        // Grammar data - Organized according to Tae Kim's Guide to Learning Japanese
        const grammarPoints = [
            {
                title: "Basic Structures — State of Being",
                japanese: "これは本です。",
                furigana: "これは<ruby>本<rt>ほん</rt></ruby>です。",
                english: "This is a book.",
                explanation: "Japanese doesn't use a verb like 'is/am/are'. Instead, it uses だ (informal) or です (polite) to declare that something 'is' something else. This is called the state-of-being.",
                anime: {
                    japanese: "私は学生ではありません。",
                    furigana: "<ruby>私<rt>わたし</rt></ruby>は<ruby>学生<rt>がくせい</rt></ruby>ではありません。",
                    english: "I am not a student.",
                    source: "Basic Introduction"
                }
            },
            {
                title: "は (wa) — Topic Marker",
                japanese: "私は学生です。",
                furigana: "<ruby>私<rt>わたし</rt></ruby>は<ruby>学生<rt>がくせい</rt></ruby>です。",
                english: "I am a student.",
                explanation: "は marks the topic of conversation, not the grammatical subject. It tells listeners 'regarding this, here's what I want to say'. The topic-comment structure is the foundation of Japanese sentences.",
                anime: {
                    japanese: "日本語は難しくないです。",
                    furigana: "<ruby>日本語<rt>にほんご</rt></ruby>は<ruby>難<rt>むずか</rt></ruby>しくないです。",
                    english: "Japanese is not difficult.",
                    source: "Language Class"
                }
            },
            {
                title: "が (ga) — Subject Emphasis",
                japanese: "誰が学生ですか？",
                furigana: "<ruby>誰<rt>だれ</rt></ruby>が<ruby>学生<rt>がくせい</rt></ruby>ですか？",
                english: "Who is a student?",
                explanation: "Unlike は, が is used to identify or emphasize the subject. It's essential in questions asking 'who' or 'what', and when introducing new information or highlighting a specific thing.",
                anime: {
                    japanese: "ゆきが降っています。",
                    furigana: "<ruby>雪<rt>ゆき</rt></ruby>が<ruby>降<rt>ふ</rt></ruby>っています。",
                    english: "Snow is falling.",
                    source: "Weather Description"
                }
            },
            {
                title: "Adjectives — Properties and States",
                japanese: "空は青いです。リンゴは赤いです。",
                furigana: "<ruby>空<rt>そら</rt></ruby>は<ruby>青<rt>あお</rt></ruby>いです。リンゴは<ruby>赤<rt>あか</rt></ruby>いです。",
                english: "The sky is blue. Apples are red.",
                explanation: "Japanese has two types of adjectives: い-adjectives (end in い like 青い) and な-adjectives (require な when directly modifying nouns, like 静か). Both types can be used like verbs to end sentences.",
                anime: {
                    japanese: "この映画は面白くないです。",
                    furigana: "この<ruby>映画<rt>えいが</rt></ruby>は<ruby>面白<rt>おもしろ</rt></ruby>くないです。",
                    english: "This movie is not interesting.",
                    source: "Review Scene"
                }
            },
            {
                title: "を (o) — Direct Object",
                japanese: "私はりんごを食べます。",
                furigana: "<ruby>私<rt>わたし</rt></ruby>はりんごを<ruby>食<rt>た</rt></ruby>べます。",
                english: "I eat apples.",
                explanation: "The を particle marks the direct object of an action - the thing that is being affected by the verb. It answers the question 'what?' for the action.",
                anime: {
                    japanese: "彼女は手紙を書きました。",
                    furigana: "<ruby>彼女<rt>かのじょ</rt></ruby>は<ruby>手紙<rt>てがみ</rt></ruby>を<ruby>書<rt>か</rt></ruby>きました。",
                    english: "She wrote a letter.",
                    source: "Letter Writing Scene"
                }
            },
            {
                title: "に (ni) — Target, Time, Location",
                japanese: "図書館に行きます。7時に起きます。",
                furigana: "<ruby>図書館<rt>としょかん</rt></ruby>に<ruby>行<rt>い</rt></ruby>きます。7<ruby>時<rt>じ</rt></ruby>に<ruby>起<rt>お</rt></ruby>きます。",
                english: "I go to the library. I wake up at 7 o'clock.",
                explanation: "The に particle has multiple related uses: marking destinations (movement target), specific times, and locations where something or someone exists. Think of it as marking a 'target point' in space or time.",
                anime: {
                    japanese: "猫は箱の中にいます。",
                    furigana: "<ruby>猫<rt>ねこ</rt></ruby>は<ruby>箱<rt>はこ</rt></ruby>の<ruby>中<rt>なか</rt></ruby>にいます。",
                    english: "The cat is in the box.",
                    source: "Curious Cat Scene"
                }
            },
            {
                title: "で (de) — Context, Means",
                japanese: "公園で遊びます。バスで学校に行きます。",
                furigana: "<ruby>公園<rt>こうえん</rt></ruby>で<ruby>遊<rt>あそ</rt></ruby>びます。バスで<ruby>学校<rt>がっこう</rt></ruby>に<ruby>行<rt>い</rt></ruby>きます。",
                english: "I play in the park. I go to school by bus.",
                explanation: "で marks where an action takes place (context) or the means by which something is done. Unlike に which marks a static point, で shows the stage or toolset for an action.",
                anime: {
                    japanese: "日本語で話しましょう。",
                    furigana: "<ruby>日本語<rt>にほんご</rt></ruby>で<ruby>話<rt>はな</rt></ruby>しましょう。",
                    english: "Let's speak in Japanese.",
                    source: "Language Exchange"
                }
            },
            {
                title: "Verb Basics — Dictionary Form",
                japanese: "私は毎日本を読む。",
                furigana: "<ruby>私<rt>わたし</rt></ruby>は<ruby>毎日<rt>まいにち</rt></ruby><ruby>本<rt>ほん</rt></ruby>を<ruby>読<rt>よ</rt></ruby>む。",
                english: "I read books every day.",
                explanation: "The dictionary form (辞書形) is the plain, informal form of verbs. Japanese verbs are categorized into three groups based on their endings: godan (five-step), ichidan (one-step), and irregular verbs.",
                anime: {
                    japanese: "彼は毎朝走る。",
                    furigana: "<ruby>彼<rt>かれ</rt></ruby>は<ruby>毎朝<rt>まいあさ</rt></ruby><ruby>走<rt>はし</rt></ruby>る。",
                    english: "He runs every morning.",
                    source: "Morning Exercise"
                }
            },
            {
                title: "Verb Basics — ます Form",
                japanese: "私は毎日本を読みます。",
                furigana: "<ruby>私<rt>わたし</rt></ruby>は<ruby>毎日<rt>まいにち</rt></ruby><ruby>本<rt>ほん</rt></ruby>を<ruby>読<rt>よ</rt></ruby>みます。",
                english: "I read books every day.",
                explanation: "The ます form is the polite present/future form of verbs, used in formal situations. To create it, take the verb stem (remove the final -u from the dictionary form) and add ます.",
                anime: {
                    japanese: "日本語を勉強します。",
                    furigana: "<ruby>日本語<rt>にほんご</rt></ruby>を<ruby>勉強<rt>べんきょう</rt></ruby>します。",
                    english: "I study Japanese.",
                    source: "Study Session"
                }
            },
            {
                title: "の (no) — Possession, Description",
                japanese: "これは私の本です。",
                furigana: "これは<ruby>私<rt>わたし</rt></ruby>の<ruby>本<rt>ほん</rt></ruby>です。",
                english: "This is my book.",
                explanation: "の connects two nouns, showing possession ('A of B'), description ('B-type A'), or defining characteristics. It's one of the most versatile particles in Japanese, creating noun phrases and sometimes even replacing nouns entirely.",
                anime: {
                    japanese: "赤いのが好きです。",
                    furigana: "<ruby>赤<rt>あか</rt></ruby>いのが<ruby>好<rt>す</rt></ruby>きです。",
                    english: "I like the red one.",
                    source: "Shopping Scene"
                }
            },
            {
                title: "も (mo) — Also, Too",
                japanese: "私も学生です。",
                furigana: "<ruby>私<rt>わたし</rt></ruby>も<ruby>学生<rt>がくせい</rt></ruby>です。",
                english: "I am also a student.",
                explanation: "も replaces particles like は, が, and を to indicate that something also applies to the marked item. It creates a sense of inclusion or similarity with something previously mentioned.",
                anime: {
                    japanese: "コーヒーも紅茶も飲みません。",
                    furigana: "コーヒーも<ruby>紅茶<rt>こうちゃ</rt></ruby>も<ruby>飲<rt>の</rt></ruby>みません。",
                    english: "I don't drink either coffee or tea.",
                    source: "Cafe Scene"
                }
            },
            {
                title: "Past Tense — た Form",
                japanese: "昨日、映画を見ました。",
                furigana: "<ruby>昨日<rt>きのう</rt></ruby>、<ruby>映画<rt>えいが</rt></ruby>を<ruby>見<rt>み</rt></ruby>ました。",
                english: "I watched a movie yesterday.",
                explanation: "Past actions are expressed with the た form. For verbs in the polite form, ます becomes ました. Each verb group has specific rules for forming the past tense in plain form.",
                anime: {
                    japanese: "パンを食べた後、学校に行きました。",
                    furigana: "パンを<ruby>食<rt>た</rt></ruby>べた<ruby>後<rt>あと</rt></ruby>、<ruby>学校<rt>がっこう</rt></ruby>に<ruby>行<rt>い</rt></ruby>きました。",
                    english: "After eating bread, I went to school.",
                    source: "School Morning"
                }
            },
            {
                title: "Negative Form — ない/ません",
                japanese: "私は魚を食べません。",
                furigana: "<ruby>私<rt>わたし</rt></ruby>は<ruby>魚<rt>さかな</rt></ruby>を<ruby>食<rt>た</rt></ruby>べません。",
                english: "I don't eat fish.",
                explanation: "For expressing negation, verbs use the ない ending in plain form or ません in polite form. Negating turns an action into its opposite. い-adjectives change their final い to くない, while な-adjectives use じゃない.",
                anime: {
                    japanese: "あの人を知りませんでした。",
                    furigana: "あの<ruby>人<rt>ひと</rt></ruby>を<ruby>知<rt>し</rt></ruby>りませんでした。",
                    english: "I didn't know that person.",
                    source: "Mistaken Identity"
                }
            },
            {
                title: "て Form — Connecting Actions",
                japanese: "朝起きて、朝ご飯を食べました。",
                furigana: "<ruby>朝<rt>あさ</rt></ruby><ruby>起<rt>お</rt></ruby>きて、<ruby>朝<rt>あさ</rt></ruby>ご<ruby>飯<rt>はん</rt></ruby>を<ruby>食<rt>た</rt></ruby>べました。",
                english: "I woke up and ate breakfast.",
                explanation: "The て form is essential for connecting actions in sequence. It's like saying 'and' between verbs. This form is the foundation for more complex grammar and serves as the connective tissue of Japanese sentences.",
                anime: {
                    japanese: "窓を開けて、空気を入れてください。",
                    furigana: "<ruby>窓<rt>まど</rt></ruby>を<ruby>開<rt>あ</rt></ruby>けて、<ruby>空気<rt>くうき</rt></ruby>を<ruby>入<rt>い</rt></ruby>れてください。",
                    english: "Please open the window and let in some air.",
                    source: "Classroom Scene"
                }
            },
            {
                title: "ている — Continuous States",
                japanese: "今、本を読んでいます。",
                furigana: "<ruby>今<rt>いま</rt></ruby>、<ruby>本<rt>ほん</rt></ruby>を<ruby>読<rt>よ</rt></ruby>んでいます。",
                english: "I am reading a book now.",
                explanation: "The ている form (て + いる) expresses ongoing actions or resulting states. Like English '-ing' for continuous actions, but also used for states that result from completed actions (like 'the window is opened').",
                anime: {
                    japanese: "彼は東京に住んでいます。",
                    furigana: "<ruby>彼<rt>かれ</rt></ruby>は<ruby>東京<rt>とうきょう</rt></ruby>に<ruby>住<rt>す</rt></ruby>んでいます。",
                    english: "He lives in Tokyo.",
                    source: "Character Introduction"
                }
            },
            {
                title: "たい — Desire",
                japanese: "日本に行きたいです。",
                furigana: "<ruby>日本<rt>にほん</rt></ruby>に<ruby>行<rt>い</rt></ruby>きたいです。",
                english: "I want to go to Japan.",
                explanation: "The たい form expresses personal desire by attaching to verb stems. It conjugates as an い-adjective. Note that when using たい, the object particle often changes from を to が, especially in casual speech.",
                anime: {
                    japanese: "何が食べたいですか？",
                    furigana: "<ruby>何<rt>なに</rt></ruby>が<ruby>食<rt>た</rt></ruby>べたいですか？",
                    english: "What do you want to eat?",
                    source: "Restaurant Scene"
                }
            },
            {
                title: "と (to) — Quotation, With",
                japanese: "友達と映画を見ました。",
                furigana: "<ruby>友達<rt>ともだち</rt></ruby>と<ruby>映画<rt>えいが</rt></ruby>を<ruby>見<rt>み</rt></ruby>ました。",
                english: "I watched a movie with my friend.",
                explanation: "と has two major uses: marking companions ('with') and quotations. As a quoting particle, it reports speech or thoughts before verbs like 言う (to say) or 思う (to think). As a companion marker, it indicates doing something together.",
                anime: {
                    japanese: "彼は「わかりました」と言いました。",
                    furigana: "<ruby>彼<rt>かれ</rt></ruby>は「わかりました」と<ruby>言<rt>い</rt></ruby>いました。",
                    english: "He said, 'I understand.'",
                    source: "Dialogue Scene"
                }
            },
            {
                title: "あります/います — Existence",
                japanese: "部屋に椅子があります。庭に猫がいます。",
                furigana: "<ruby>部屋<rt>へや</rt></ruby>に<ruby>椅子<rt>いす</rt></ruby>があります。<ruby>庭<rt>にわ</rt></ruby>に<ruby>猫<rt>ねこ</rt></ruby>がいます。",
                english: "There is a chair in the room. There is a cat in the garden.",
                explanation: "These verbs express existence: あります for inanimate objects and います for living things. They're also used to express possession when paired with the particle は: 私は車があります (I have a car).",
                anime: {
                    japanese: "ここにコンビニがあります。",
                    furigana: "ここに<ruby>コンビニ</rt></ruby>があります。",
                    english: "There is a convenience store here.",
                    source: "Giving Directions"
                }
            },
            {
                title: "て + ください — Requests",
                japanese: "ドアを開けてください。",
                furigana: "ドアを<ruby>開<rt>あ</rt></ruby>けてください。",
                english: "Please open the door.",
                explanation: "The て form combined with ください creates polite requests. It's one of the most immediately useful constructions for beginners, allowing you to politely ask people to do things.",
                anime: {
                    japanese: "もう一度言ってください。",
                    furigana: "もう<ruby>一度<rt>いちど</rt></ruby><ruby>言<rt>い</rt></ruby>ってください。",
                    english: "Please say it one more time.",
                    source: "Language Class"
                }
            },
            {
                title: "から (kara) — From, Because",
                japanese: "9時から5時まで働きます。",
                furigana: "9<ruby>時<rt>じ</rt></ruby>から5<ruby>時<rt>じ</rt></ruby>まで<ruby>働<rt>はたら</rt></ruby>きます。",
                english: "I work from 9 to 5.",
                explanation: "から serves two roles: marking starting points (in time/space) and giving reasons (meaning 'because'). As a connector, から comes after a complete clause to explain why something happens.",
                anime: {
                    japanese: "雨が降っているから、行きません。",
                    furigana: "<ruby>雨<rt>あめ</rt></ruby>が<ruby>降<rt>ふ</rt></ruby>っているから、<ruby>行<rt>い</rt></ruby>きません。",
                    english: "Because it's raining, I won't go.",
                    source: "Rainy Day Scene"
                }
            },
            {
                title: "まで (made) — Until",
                japanese: "駅まで歩きます。",
                furigana: "<ruby>駅<rt>えき</rt></ruby>まで<ruby>歩<rt>ある</rt></ruby>きます。",
                english: "I walk to the station.",
                explanation: "まで indicates a limit in time or space, meaning 'until' or 'up to'. It pairs well with から to create ranges ('from X to Y'). Unlike へ or に, まで emphasizes reaching the endpoint or boundary.",
                anime: {
                    japanese: "明日まで待ってください。",
                    furigana: "<ruby>明日<rt>あした</rt></ruby>まで<ruby>待<rt>ま</rt></ruby>ってください。",
                    english: "Please wait until tomorrow.",
                    source: "Patient Waiting"
                }
            },
            {
                title: "ましょう — Suggestions",
                japanese: "一緒に行きましょう。",
                furigana: "<ruby>一緒<rt>いっしょ</rt></ruby>に<ruby>行<rt>い</rt></ruby>きましょう。",
                english: "Let's go together.",
                explanation: "The ましょう form makes suggestions and invitations. Similar to 'let's' in English, it proposes doing something together. Made by adding ましょう to the verb stem, it's softer than commands but still shows initiative.",
                anime: {
                    japanese: "日本語で話しましょう！",
                    furigana: "<ruby>日本語<rt>にほんご</rt></ruby>で<ruby>話<rt>はな</rt></ruby>しましょう！",
                    english: "Let's speak in Japanese!",
                    source: "Language Exchange"
                }
            },
            {
                title: "Question Markers — か, ですか",
                japanese: "あなたは学生ですか？",
                furigana: "あなたは<ruby>学生<rt>がくせい</rt></ruby>ですか？",
                english: "Are you a student?",
                explanation: "Questions in Japanese can be formed simply by adding か at the end of a sentence. For state-of-being sentences, ですか is used in polite form. The pitch rises at the end, similar to how English speakers raise their voice for questions.",
                anime: {
                    japanese: "何を食べましたか？",
                    furigana: "<ruby>何<rt>なに</rt></ruby>を<ruby>食<rt>た</rt></ruby>べましたか？",
                    english: "What did you eat?",
                    source: "Mealtime Conversation"
                }
            },
            {
                title: "Sentence-Ending Particles — よ, ね",
                japanese: "明日は雨ですよ。いい天気ですね。",
                furigana: "<ruby>明日<rt>あした</rt></ruby>は<ruby>雨<rt>あめ</rt></ruby>ですよ。いい<ruby>天気<rt>てんき</rt></ruby>ですね。",
                english: "It will rain tomorrow (I'm telling you). Nice weather, isn't it?",
                explanation: "These particles add emotional nuance: よ conveys new information or emphasis to the listener, while ね seeks agreement or confirmation. They're essential for making Japanese sound natural rather than robotic.",
                anime: {
                    japanese: "この料理、おいしいですね！",
                    furigana: "この<ruby>料理<rt>りょうり</rt></ruby>、おいしいですね！",
                    english: "This food is delicious, isn't it!",
                    source: "Restaurant Reaction"
                }
            },
            {
                title: "Basic Counters — Time, Objects",
                japanese: "りんごを3つ買いました。",
                furigana: "りんごを3<ruby>つ<rt>つ</rt></ruby><ruby>買<rt>か</rt></ruby>いました。",
                english: "I bought three apples.",
                explanation: "Japanese uses specific counters depending on what's being counted. Common ones include ～つ for small objects, ～人 (にん) for people, ～枚 (まい) for flat objects, and ～本 (ほん) for long cylindrical things.",
                anime: {
                    japanese: "猫が二匹います。",
                    furigana: "<ruby>猫<rt>ねこ</rt></ruby>が<ruby>二匹<rt>にひき</rt></ruby>います。",
                    english: "There are two cats.",
                    source: "Pet Description"
                }
            }
        ];
        
        // Complete JLPT N5 Kanji data
        const n5Kanji = [
            {
                kanji: "日",
                readings: {
                    onyomi: "ニチ、ジツ",
                    kunyomi: "ひ、-び、-か"
                },
                meaning: "day, sun, Japan",
                examples: [
                    { word: "日本", reading: "にほん", meaning: "Japan" },
                    { word: "今日", reading: "きょう", meaning: "today" },
                    { word: "日曜日", reading: "にちようび", meaning: "Sunday" }
                ]
            },
            {
                kanji: "一",
                readings: {
                    onyomi: "イチ、イツ",
                    kunyomi: "ひと-、ひと.つ"
                },
                meaning: "one",
                examples: [
                    { word: "一人", reading: "ひとり", meaning: "one person, alone" },
                    { word: "一番", reading: "いちばん", meaning: "number one, first" },
                    { word: "一日", reading: "いちにち", meaning: "one day" }
                ]
            },
            {
                kanji: "人",
                readings: {
                    onyomi: "ジン、ニン",
                    kunyomi: "ひと"
                },
                meaning: "person",
                examples: [
                    { word: "人々", reading: "ひとびと", meaning: "people" },
                    { word: "日本人", reading: "にほんじん", meaning: "Japanese person" },
                    { word: "外国人", reading: "がいこくじん", meaning: "foreigner" }
                ]
            },
            {
                kanji: "年",
                readings: {
                    onyomi: "ネン",
                    kunyomi: "とし"
                },
                meaning: "year",
                examples: [
                    { word: "今年", reading: "ことし", meaning: "this year" },
                    { word: "去年", reading: "きょねん", meaning: "last year" },
                    { word: "一年", reading: "いちねん", meaning: "one year" }
                ]
            },
            {
                kanji: "大",
                readings: {
                    onyomi: "ダイ、タイ",
                    kunyomi: "おお-、おお.きい"
                },
                meaning: "big, large",
                examples: [
                    { word: "大きい", reading: "おおきい", meaning: "big" },
                    { word: "大学", reading: "だいがく", meaning: "university" },
                    { word: "大人", reading: "おとな", meaning: "adult" }
                ]
            },
            {
                kanji: "小",
                readings: {
                    onyomi: "ショウ",
                    kunyomi: "ちい.さい、こ-、お-"
                },
                meaning: "small, little",
                examples: [
                    { word: "小さい", reading: "ちいさい", meaning: "small" },
                    { word: "小学校", reading: "しょうがっこう", meaning: "elementary school" },
                    { word: "小説", reading: "しょうせつ", meaning: "novel" }
                ]
            },
            {
                kanji: "中",
                readings: {
                    onyomi: "チュウ",
                    kunyomi: "なか、うち、あた.る"
                },
                meaning: "middle, inside, center",
                examples: [
                    { word: "中国", reading: "ちゅうごく", meaning: "China" },
                    { word: "中学校", reading: "ちゅうがっこう", meaning: "junior high school" },
                    { word: "一日中", reading: "いちにちじゅう", meaning: "all day long" }
                ]
            },
            {
                kanji: "山",
                readings: {
                    onyomi: "サン",
                    kunyomi: "やま"
                },
                meaning: "mountain",
                examples: [
                    { word: "富士山", reading: "ふじさん", meaning: "Mt. Fuji" },
                    { word: "山々", reading: "やまやま", meaning: "mountains" },
                    { word: "火山", reading: "かざん", meaning: "volcano" }
                ]
            },
            {
                kanji: "川",
                readings: {
                    onyomi: "セン",
                    kunyomi: "かわ"
                },
                meaning: "river",
                examples: [
                    { word: "川岸", reading: "かわぎし", meaning: "riverbank" },
                    { word: "小川", reading: "おがわ", meaning: "stream, brook" },
                    { word: "河川", reading: "かせん", meaning: "rivers" }
                ]
            },
            {
                kanji: "水",
                readings: {
                    onyomi: "スイ",
                    kunyomi: "みず、みず-"
                },
                meaning: "water",
                examples: [
                    { word: "水曜日", reading: "すいようび", meaning: "Wednesday" },
                    { word: "水泳", reading: "すいえい", meaning: "swimming" },
                    { word: "冷水", reading: "れいすい", meaning: "cold water" }
                ]
            },
            {
                kanji: "火",
                readings: {
                    onyomi: "カ",
                    kunyomi: "ひ、-び、ほ-"
                },
                meaning: "fire",
                examples: [
                    { word: "火曜日", reading: "かようび", meaning: "Tuesday" },
                    { word: "火事", reading: "かじ", meaning: "fire, conflagration" },
                    { word: "花火", reading: "はなび", meaning: "fireworks" }
                ]
            },
            {
                kanji: "木",
                readings: {
                    onyomi: "モク、ボク",
                    kunyomi: "き、こ-"
                },
                meaning: "tree, wood",
                examples: [
                    { word: "木曜日", reading: "もくようび", meaning: "Thursday" },
                    { word: "木々", reading: "きぎ", meaning: "trees" },
                    { word: "木材", reading: "もくざい", meaning: "lumber, timber" }
                ]
            },
            {
                kanji: "土",
                readings: {
                    onyomi: "ド、ト",
                    kunyomi: "つち"
                },
                meaning: "earth, soil, ground",
                examples: [
                    { word: "土曜日", reading: "どようび", meaning: "Saturday" },
                    { word: "土地", reading: "とち", meaning: "land, plot" },
                    { word: "粘土", reading: "ねんど", meaning: "clay" }
                ]
            },
            {
                kanji: "金",
                readings: {
                    onyomi: "キン、コン",
                    kunyomi: "かね、かな-、-がね"
                },
                meaning: "gold, money, metal",
                examples: [
                    { word: "金曜日", reading: "きんようび", meaning: "Friday" },
                    { word: "お金", reading: "おかね", meaning: "money" },
                    { word: "金属", reading: "きんぞく", meaning: "metal" }
                ]
            },
            {
                kanji: "月",
                readings: {
                    onyomi: "ゲツ、ガツ",
                    kunyomi: "つき"
                },
                meaning: "moon, month",
                examples: [
                    { word: "月曜日", reading: "げつようび", meaning: "Monday" },
                    { word: "一月", reading: "いちがつ", meaning: "January" },
                    { word: "月見", reading: "つきみ", meaning: "moon viewing" }
                ]
            },
            {
                kanji: "本",
                readings: {
                    onyomi: "ホン",
                    kunyomi: "もと"
                },
                meaning: "book, origin, real",
                examples: [
                    { word: "日本", reading: "にほん", meaning: "Japan" },
                    { word: "本当", reading: "ほんとう", meaning: "truth, reality" },
                    { word: "本屋", reading: "ほんや", meaning: "bookstore" }
                ]
            },
            {
                kanji: "田",
                readings: {
                    onyomi: "デン",
                    kunyomi: "た"
                },
                meaning: "rice field",
                examples: [
                    { word: "田中", reading: "たなか", meaning: "Tanaka (surname)" },
                    { word: "山田", reading: "やまだ", meaning: "Yamada (surname)" },
                    { word: "田舎", reading: "いなか", meaning: "countryside" }
                ]
            },
            {
                kanji: "学",
                readings: {
                    onyomi: "ガク",
                    kunyomi: "まな.ぶ"
                },
                meaning: "study, learning",
                examples: [
                    { word: "学校", reading: "がっこう", meaning: "school" },
                    { word: "大学", reading: "だいがく", meaning: "university" },
                    { word: "学生", reading: "がくせい", meaning: "student" }
                ]
            },
            {
                kanji: "生",
                readings: {
                    onyomi: "セイ、ショウ",
                    kunyomi: "い.きる、う.まれる、なま"
                },
                meaning: "life, birth, raw",
                examples: [
                    { word: "学生", reading: "がくせい", meaning: "student" },
                    { word: "先生", reading: "せんせい", meaning: "teacher" },
                    { word: "生まれる", reading: "うまれる", meaning: "to be born" }
                ]
            },
            {
                kanji: "先",
                readings: {
                    onyomi: "セン",
                    kunyomi: "さき、ま.ず"
                },
                meaning: "before, ahead, previous",
                examples: [
                    { word: "先生", reading: "せんせい", meaning: "teacher" },
                    { word: "先週", reading: "せんしゅう", meaning: "last week" },
                    { word: "先", reading: "さき", meaning: "tip, point, ahead" }
                ]
            },
            {
                kanji: "出",
                readings: {
                    onyomi: "シュツ、スイ",
                    kunyomi: "で.る、だ.す"
                },
                meaning: "exit, leave, go out",
                examples: [
                    { word: "出口", reading: "でぐち", meaning: "exit" },
                    { word: "出発", reading: "しゅっぱつ", meaning: "departure" },
                    { word: "出る", reading: "でる", meaning: "to go out, to leave" }
                ]
            },
            {
                kanji: "子",
                readings: {
                    onyomi: "シ、ス",
                    kunyomi: "こ"
                },
                meaning: "child, seed",
                examples: [
                    { word: "子供", reading: "こども", meaning: "child" },
                    { word: "女子", reading: "じょし", meaning: "girl" },
                    { word: "男子", reading: "だんし", meaning: "boy" }
                ]
            },
            {
                kanji: "気",
                readings: {
                    onyomi: "キ、ケ",
                    kunyomi: "き"
                },
                meaning: "spirit, mind, air",
                examples: [
                    { word: "元気", reading: "げんき", meaning: "health, energy" },
                    { word: "天気", reading: "てんき", meaning: "weather" },
                    { word: "気持ち", reading: "きもち", meaning: "feeling" }
                ]
            },
            {
                kanji: "入",
                readings: {
                    onyomi: "ニュウ",
                    kunyomi: "い.る、-い.る、はい.る"
                },
                meaning: "enter, insert",
                examples: [
                    { word: "入口", reading: "いりぐち", meaning: "entrance" },
                    { word: "入る", reading: "はいる", meaning: "to enter" },
                    { word: "入学", reading: "にゅうがく", meaning: "school enrollment" }
                ]
            },
            {
                kanji: "口",
                readings: {
                    onyomi: "コウ、ク",
                    kunyomi: "くち"
                },
                meaning: "mouth, opening",
                examples: [
                    { word: "入口", reading: "いりぐち", meaning: "entrance" },
                    { word: "出口", reading: "でぐち", meaning: "exit" },
                    { word: "人口", reading: "じんこう", meaning: "population" }
                ]
            },
            {
                kanji: "手",
                readings: {
                    onyomi: "シュ",
                    kunyomi: "て、た-"
                },
                meaning: "hand",
                examples: [
                    { word: "手紙", reading: "てがみ", meaning: "letter" },
                    { word: "上手", reading: "じょうず", meaning: "skillful" },
                    { word: "下手", reading: "へた", meaning: "unskillful" }
                ]
            },
            {
                kanji: "上",
                readings: {
                    onyomi: "ジョウ、ショウ",
                    kunyomi: "うえ、うわ-、かみ、あ.げる"
                },
                meaning: "above, up, over",
                examples: [
                    { word: "上手", reading: "じょうず", meaning: "skillful" },
                    { word: "上がる", reading: "あがる", meaning: "to rise" },
                    { word: "上", reading: "うえ", meaning: "above, up" }
                ]
            },
            {
                kanji: "下",
                readings: {
                    onyomi: "カ、ゲ",
                    kunyomi: "した、しも、さ.げる、さ.がる、くだ.る"
                },
                meaning: "below, down, under",
                examples: [
                    { word: "下手", reading: "へた", meaning: "unskillful" },
                    { word: "下がる", reading: "さがる", meaning: "to go down" },
                    { word: "下", reading: "した", meaning: "under, below" }
                ]
            },
            {
                kanji: "右",
                readings: {
                    onyomi: "ウ、ユウ",
                    kunyomi: "みぎ"
                },
                meaning: "right",
                examples: [
                    { word: "右側", reading: "みぎがわ", meaning: "right side" },
                    { word: "左右", reading: "さゆう", meaning: "left and right" },
                    { word: "右", reading: "みぎ", meaning: "right" }
                ]
            },
            {
                kanji: "左",
                readings: {
                    onyomi: "サ、シャ",
                    kunyomi: "ひだり"
                },
                meaning: "left",
                examples: [
                    { word: "左側", reading: "ひだりがわ", meaning: "left side" },
                    { word: "左右", reading: "さゆう", meaning: "left and right" },
                    { word: "左", reading: "ひだり", meaning: "left" }
                ]
            },
            {
                kanji: "立",
                readings: {
                    onyomi: "リツ、リュウ",
                    kunyomi: "た.つ、-た.つ、た.てる"
                },
                meaning: "stand, rise",
                examples: [
                    { word: "立つ", reading: "たつ", meaning: "to stand" },
                    { word: "立てる", reading: "たてる", meaning: "to set up" },
                    { word: "国立", reading: "こくりつ", meaning: "national" }
                ]
            },
            {
                kanji: "時",
                readings: {
                    onyomi: "ジ",
                    kunyomi: "とき、-どき"
                },
                meaning: "time, hour",
                examples: [
                    { word: "時間", reading: "じかん", meaning: "time" },
                    { word: "時計", reading: "とけい", meaning: "clock, watch" },
                    { word: "何時", reading: "なんじ", meaning: "what time" }
                ]
            },
            {
                kanji: "分",
                readings: {
                    onyomi: "ブン、フン、ブ",
                    kunyomi: "わ.ける、わ.かれる、わ.かる"
                },
                meaning: "minute, part, understand",
                examples: [
                    { word: "分かる", reading: "わかる", meaning: "to understand" },
                    { word: "自分", reading: "じぶん", meaning: "oneself" },
                    { word: "一分", reading: "いっぷん", meaning: "one minute" }
                ]
            },
            {
                kanji: "後",
                readings: {
                    onyomi: "ゴ、コウ",
                    kunyomi: "のち、うし.ろ、あと、おく.れる"
                },
                meaning: "after, behind",
                examples: [
                    { word: "午後", reading: "ごご", meaning: "afternoon" },
                    { word: "後ろ", reading: "うしろ", meaning: "behind" },
                    { word: "最後", reading: "さいご", meaning: "last, end" }
                ]
            },
            {
                kanji: "前",
                readings: {
                    onyomi: "ゼン",
                    kunyomi: "まえ、-まえ"
                },
                meaning: "before, front",
                examples: [
                    { word: "午前", reading: "ごぜん", meaning: "morning, a.m." },
                    { word: "前", reading: "まえ", meaning: "front, before" },
                    { word: "名前", reading: "なまえ", meaning: "name" }
                ]
            },
            {
                kanji: "間",
                readings: {
                    onyomi: "カン、ケン",
                    kunyomi: "あいだ、ま、あい"
                },
                meaning: "interval, space, between",
                examples: [
                    { word: "時間", reading: "じかん", meaning: "time" },
                    { word: "人間", reading: "にんげん", meaning: "human" },
                    { word: "間", reading: "あいだ", meaning: "between, interval" }
                ]
            },
            {
                kanji: "北",
                readings: {
                    onyomi: "ホク",
                    kunyomi: "きた"
                },
                meaning: "north",
                examples: [
                    { word: "北", reading: "きた", meaning: "north" },
                    { word: "北口", reading: "きたぐち", meaning: "north entrance" },
                    { word: "北海道", reading: "ほっかいどう", meaning: "Hokkaido" }
                ]
            },
            {
                kanji: "南",
                readings: {
                    onyomi: "ナン、ナ",
                    kunyomi: "みなみ"
                },
                meaning: "south",
                examples: [
                    { word: "南", reading: "みなみ", meaning: "south" },
                    { word: "南口", reading: "みなみぐち", meaning: "south entrance" },
                    { word: "南米", reading: "なんべい", meaning: "South America" }
                ]
            },
            {
                kanji: "西",
                readings: {
                    onyomi: "セイ、サイ",
                    kunyomi: "にし"
                },
                meaning: "west",
                examples: [
                    { word: "西", reading: "にし", meaning: "west" },
                    { word: "西口", reading: "にしぐち", meaning: "west entrance" },
                    { word: "西洋", reading: "せいよう", meaning: "the West (Europe/America)" }
                ]
            },
            {
                kanji: "東",
                readings: {
                    onyomi: "トウ",
                    kunyomi: "ひがし"
                },
                meaning: "east",
                examples: [
                    { word: "東", reading: "ひがし", meaning: "east" },
                    { word: "東京", reading: "とうきょう", meaning: "Tokyo" },
                    { word: "東口", reading: "ひがしぐち", meaning: "east entrance" }
                ]
            },
            {
                kanji: "見",
                readings: {
                    onyomi: "ケン",
                    kunyomi: "み.る、み.える、み.せる"
                },
                meaning: "see, look",
                examples: [
                    { word: "見る", reading: "みる", meaning: "to see, to look" },
                    { word: "見せる", reading: "みせる", meaning: "to show" },
                    { word: "意見", reading: "いけん", meaning: "opinion" }
                ]
            },
            {
                kanji: "行",
                readings: {
                    onyomi: "コウ、ギョウ、アン",
                    kunyomi: "い.く、ゆ.く、おこな.う"
                },
                meaning: "go, travel, perform",
                examples: [
                    { word: "行く", reading: "いく", meaning: "to go" },
                    { word: "旅行", reading: "りょこう", meaning: "travel" },
                    { word: "銀行", reading: "ぎんこう", meaning: "bank" }
                ]
            },
            {
                kanji: "来",
                readings: {
                    onyomi: "ライ、タイ",
                    kunyomi: "く.る、きた.る、きた.す"
                },
                meaning: "come, next, future",
                examples: [
                    { word: "来る", reading: "くる", meaning: "to come" },
                    { word: "来週", reading: "らいしゅう", meaning: "next week" },
                    { word: "来月", reading: "らいげつ", meaning: "next month" }
                ]
            },
            {
                kanji: "言",
                readings: {
                    onyomi: "ゲン、ゴン",
                    kunyomi: "い.う、こと"
                },
                meaning: "say, word",
                examples: [
                    { word: "言う", reading: "いう", meaning: "to say" },
                    { word: "言葉", reading: "ことば", meaning: "word, language" },
                    { word: "日本語", reading: "にほんご", meaning: "Japanese language" }
                ]
            },
            {
                kanji: "話",
                readings: {
                    onyomi: "ワ",
                    kunyomi: "はな.す、はなし"
                },
                meaning: "talk, speak, story",
                examples: [
                    { word: "話す", reading: "はなす", meaning: "to speak" },
                    { word: "電話", reading: "でんわ", meaning: "telephone" },
                    { word: "会話", reading: "かいわ", meaning: "conversation" }
                ]
            },
            {
                kanji: "聞",
                readings: {
                    onyomi: "ブン、モン",
                    kunyomi: "き.く、き.こえる"
                },
                meaning: "hear, listen, ask",
                examples: [
                    { word: "聞く", reading: "きく", meaning: "to hear, to listen" },
                    { word: "新聞", reading: "しんぶん", meaning: "newspaper" },
                    { word: "質問", reading: "しつもん", meaning: "question" }
                ]
            },
            {
                kanji: "書",
                readings: {
                    onyomi: "ショ",
                    kunyomi: "か.く、-が.き"
                },
                meaning: "write, book",
                examples: [
                    { word: "書く", reading: "かく", meaning: "to write" },
                    { word: "辞書", reading: "じしょ", meaning: "dictionary" },
                    { word: "図書館", reading: "としょかん", meaning: "library" }
                ]
            },
            {
                kanji: "食",
                readings: {
                    onyomi: "ショク、ジキ",
                    kunyomi: "く.う、く.らう、た.べる"
                },
                meaning: "eat, food",
                examples: [
                    { word: "食べる", reading: "たべる", meaning: "to eat" },
                    { word: "食事", reading: "しょくじ", meaning: "meal" },
                    { word: "朝食", reading: "ちょうしょく", meaning: "breakfast" }
                ]
            },
            {
                kanji: "飲",
                readings: {
                    onyomi: "イン",
                    kunyomi: "の.む、-の.み"
                },
                meaning: "drink",
                examples: [
                    { word: "飲む", reading: "のむ", meaning: "to drink" },
                    { word: "飲み物", reading: "のみもの", meaning: "beverage" },
                    { word: "飲食", reading: "いんしょく", meaning: "food and drink" }
                ]
            },
            {
                kanji: "車",
                readings: {
                    onyomi: "シャ",
                    kunyomi: "くるま"
                },
                meaning: "car, vehicle",
                examples: [
                    { word: "車", reading: "くるま", meaning: "car" },
                    { word: "電車", reading: "でんしゃ", meaning: "train" },
                    { word: "自転車", reading: "じてんしゃ", meaning: "bicycle" }
                ]
            },
            {
                kanji: "駅",
                readings: {
                    onyomi: "エキ",
                    kunyomi: ""
                },
                meaning: "station",
                examples: [
                    { word: "駅", reading: "えき", meaning: "station" },
                    { word: "駅前", reading: "えきまえ", meaning: "in front of the station" },
                    { word: "東京駅", reading: "とうきょうえき", meaning: "Tokyo Station" }
                ]
            },
            {
                kanji: "今",
                readings: {
                    onyomi: "コン、キン",
                    kunyomi: "いま"
                },
                meaning: "now, present",
                examples: [
                    { word: "今", reading: "いま", meaning: "now" },
                    { word: "今日", reading: "きょう", meaning: "today" },
                    { word: "今年", reading: "ことし", meaning: "this year" }
                ]
            },
            {
                kanji: "朝",
                readings: {
                    onyomi: "チョウ",
                    kunyomi: "あさ"
                },
                meaning: "morning",
                examples: [
                    { word: "朝", reading: "あさ", meaning: "morning" },
                    { word: "朝食", reading: "ちょうしょく", meaning: "breakfast" },
                    { word: "今朝", reading: "けさ", meaning: "this morning" }
                ]
            },
            {
                kanji: "午",
                readings: {
                    onyomi: "ゴ",
                    kunyomi: "うま"
                },
                meaning: "noon",
                examples: [
                    { word: "午前", reading: "ごぜん", meaning: "morning, a.m." },
                    { word: "午後", reading: "ごご", meaning: "afternoon, p.m." },
                    { word: "正午", reading: "しょうご", meaning: "noon, midday" }
                ]
            },
            {
                kanji: "友",
                readings: {
                    onyomi: "ユウ",
                    kunyomi: "とも"
                },
                meaning: "friend",
                examples: [
                    { word: "友達", reading: "ともだち", meaning: "friend" },
                    { word: "友人", reading: "ゆうじん", meaning: "friend" },
                    { word: "友好", reading: "ゆうこう", meaning: "friendship" }
                ]
            },
            {
                kanji: "店",
                readings: {
                    onyomi: "テン",
                    kunyomi: "みせ、たな"
                },
                meaning: "store, shop",
                examples: [
                    { word: "店", reading: "みせ", meaning: "store, shop" },
                    { word: "喫茶店", reading: "きっさてん", meaning: "cafe" },
                    { word: "本屋さん", reading: "ほんやさん", meaning: "bookstore" }
                ]
            },
            {
                kanji: "買",
                readings: {
                    onyomi: "バイ",
                    kunyomi: "か.う"
                },
                meaning: "buy, purchase",
                examples: [
                    { word: "買う", reading: "かう", meaning: "to buy" },
                    { word: "買い物", reading: "かいもの", meaning: "shopping" },
                    { word: "購買", reading: "こうばい", meaning: "purchase" }
                ]
            },
            {
                kanji: "白",
                readings: {
                    onyomi: "ハク、ビャク",
                    kunyomi: "しろ、しら-"
                },
                meaning: "white",
                examples: [
                    { word: "白", reading: "しろ", meaning: "white" },
                    { word: "白い", reading: "しろい", meaning: "white" },
                    { word: "面白い", reading: "おもしろい", meaning: "interesting" }
                ]
            },
            {
                kanji: "黒",
                readings: {
                    onyomi: "コク",
                    kunyomi: "くろ、くろ.い"
                },
                meaning: "black",
                examples: [
                    { word: "黒", reading: "くろ", meaning: "black" },
                    { word: "黒い", reading: "くろい", meaning: "black" },
                    { word: "黒板", reading: "こくばん", meaning: "blackboard" }
                ]
            },
            {
                kanji: "青",
                readings: {
                    onyomi: "セイ、ショウ",
                    kunyomi: "あお、あお-"
                },
                meaning: "blue, green",
                examples: [
                    { word: "青", reading: "あお", meaning: "blue" },
                    { word: "青い", reading: "あおい", meaning: "blue" },
                    { word: "青年", reading: "せいねん", meaning: "youth" }
                ]
            },
            {
                kanji: "赤",
                readings: {
                    onyomi: "セキ、シャク",
                    kunyomi: "あか、あか-"
                },
                meaning: "red",
                examples: [
                    { word: "赤", reading: "あか", meaning: "red" },
                    { word: "赤い", reading: "あかい", meaning: "red" },
                    { word: "赤ちゃん", reading: "あかちゃん", meaning: "baby" }
                ]
            },
            {
                kanji: "国",
                readings: {
                    onyomi: "コク",
                    kunyomi: "くに"
                },
                meaning: "country, nation",
                examples: [
                    { word: "国", reading: "くに", meaning: "country" },
                    { word: "中国", reading: "ちゅうごく", meaning: "China" },
                    { word: "外国", reading: "がいこく", meaning: "foreign country" }
                ]
            },
            {
                kanji: "外",
                readings: {
                    onyomi: "ガイ、ゲ",
                    kunyomi: "そと、ほか、はず.す、はず.れる"
                },
                meaning: "outside, foreign",
                examples: [
                    { word: "外", reading: "そと", meaning: "outside" },
                    { word: "外国", reading: "がいこく", meaning: "foreign country" },
                    { word: "外国人", reading: "がいこくじん", meaning: "foreigner" }
                ]
            },
            {
                kanji: "百",
                readings: {
                    onyomi: "ヒャク",
                    kunyomi: "もも"
                },
                meaning: "hundred",
                examples: [
                    { word: "百", reading: "ひゃく", meaning: "hundred" },
                    { word: "百円", reading: "ひゃくえん", meaning: "100 yen" },
                    { word: "二百", reading: "にひゃく", meaning: "200" }
                ]
            },
            {
                kanji: "千",
                readings: {
                    onyomi: "セン",
                    kunyomi: "ち"
                },
                meaning: "thousand",
                examples: [
                    { word: "千", reading: "せん", meaning: "thousand" },
                    { word: "千円", reading: "せんえん", meaning: "1000 yen" },
                    { word: "二千", reading: "にせん", meaning: "2000" }
                ]
            },
            {
                kanji: "万",
                readings: {
                    onyomi: "マン、バン",
                    kunyomi: "よろず"
                },
                meaning: "ten thousand",
                examples: [
                    { word: "万", reading: "まん", meaning: "ten thousand" },
                    { word: "一万円", reading: "いちまんえん", meaning: "10,000 yen" },
                    { word: "何万", reading: "なんまん", meaning: "how many ten thousands" }
                ]
            },
            {
                kanji: "読",
                readings: {
                    onyomi: "ドク、トク、トウ",
                    kunyomi: "よ.む"
                },
                meaning: "read",
                examples: [
                    { word: "読む", reading: "よむ", meaning: "to read" },
                    { word: "読書", reading: "どくしょ", meaning: "reading" },
                    { word: "音読", reading: "おんどく", meaning: "reading aloud" }
                ]
            },
            {
                kanji: "休",
                readings: {
                    onyomi: "キュウ",
                    kunyomi: "やす.む、やす.まる、やす.める"
                },
                meaning: "rest, break",
                examples: [
                    { word: "休む", reading: "やすむ", meaning: "to rest" },
                    { word: "休日", reading: "きゅうじつ", meaning: "holiday" },
                    { word: "休憩", reading: "きゅうけい", meaning: "break, recess" }
                ]
            },
            {
                kanji: "男",
                readings: {
                    onyomi: "ダン、ナン",
                    kunyomi: "おとこ"
                },
                meaning: "man, male",
                examples: [
                    { word: "男", reading: "おとこ", meaning: "man" },
                    { word: "男の子", reading: "おとこのこ", meaning: "boy" },
                    { word: "男性", reading: "だんせい", meaning: "male" }
                ]
            },
            {
                kanji: "女",
                readings: {
                    onyomi: "ジョ、ニョ、ニョウ",
                    kunyomi: "おんな、め"
                },
                meaning: "woman, female",
                examples: [
                    { word: "女", reading: "おんな", meaning: "woman" },
                    { word: "女の子", reading: "おんなのこ", meaning: "girl" },
                    { word: "女性", reading: "じょせい", meaning: "female" }
                ]
            },
            {
                kanji: "名",
                readings: {
                    onyomi: "メイ、ミョウ",
                    kunyomi: "な、-な"
                },
                meaning: "name, reputation",
                examples: [
                    { word: "名前", reading: "なまえ", meaning: "name" },
                    { word: "有名", reading: "ゆうめい", meaning: "famous" },
                    { word: "名刺", reading: "めいし", meaning: "business card" }
                ]
            },
            {
                kanji: "日本",
                readings: {
                    onyomi: "ニホン、ニッポン",
                    kunyomi: ""
                },
                meaning: "Japan",
                examples: [
                    { word: "日本", reading: "にほん", meaning: "Japan" },
                    { word: "日本語", reading: "にほんご", meaning: "Japanese language" },
                    { word: "日本人", reading: "にほんじん", meaning: "Japanese person" }
                ]
            },
            {
                kanji: "学校",
                readings: {
                    onyomi: "ガッコウ",
                    kunyomi: ""
                },
                meaning: "school",
                examples: [
                    { word: "学校", reading: "がっこう", meaning: "school" },
                    { word: "小学校", reading: "しょうがっこう", meaning: "elementary school" },
                    { word: "中学校", reading: "ちゅうがっこう", meaning: "junior high school" }
                ]
            },
            {
                kanji: "先生",
                readings: {
                    onyomi: "センセイ",
                    kunyomi: ""
                },
                meaning: "teacher",
                examples: [
                    { word: "先生", reading: "せんせい", meaning: "teacher" },
                    { word: "日本語の先生", reading: "にほんごのせんせい", meaning: "Japanese language teacher" },
                    { word: "先生方", reading: "せんせいがた", meaning: "teachers" }
                ]
            },
            {
                kanji: "川口",
                readings: {
                    onyomi: "",
                    kunyomi: "かわぐち"
                },
                meaning: "river mouth, city name",
                examples: [
                    { word: "川口市", reading: "かわぐちし", meaning: "Kawaguchi City" },
                    { word: "川口駅", reading: "かわぐちえき", meaning: "Kawaguchi Station" }
                ]
            }
        ];
        
        // Render grammar cards
        const studyContent = document.getElementById('studyContent');
        
        function renderGrammarCards(filteredGrammar = grammarPoints) {
            studyContent.innerHTML = '';
            
            if (filteredGrammar.length === 0) {
                studyContent.innerHTML = `
                    <div class="col-span-full text-center py-10">
                        <p class="text-lg text-gray-600 dark:text-gray-400">No grammar points match your search.</p>
                    </div>
                `;
                return;
            }
            
            filteredGrammar.forEach((point, index) => {
                const card = document.createElement('div');
                card.className = 'grammar-card bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden';
                // Prepare anime example if available
                let animeExample = '';
                if (point.anime) {
                    animeExample = `
                        <div class="anime-example mt-4 px-4 py-3 rounded-lg border border-pink-500 bg-opacity-20 bg-pink-900">
                            <div class="flex items-center justify-between mb-2">
                                <div class="text-pink-300 font-medium flex items-center">
                                    <span class="text-xs px-2 py-1 bg-pink-900 bg-opacity-50 rounded-lg mr-2">${point.anime.source}</span>
                                </div>
                                <div class="flex space-x-1">
                                    <span class="inline-block w-3 h-3 rounded-full bg-pink-400"></span>
                                    <span class="inline-block w-3 h-3 rounded-full bg-cyan-400"></span>
                                    <span class="inline-block w-3 h-3 rounded-full bg-purple-400"></span>
                                </div>
                            </div>
                            
                            <div class="flex flex-col space-y-4">
                                <div class="w-full">
                                    <p class="text-xl text-pink-100 mb-2 leading-relaxed" style="text-shadow: 0 0 5px rgba(255, 105, 180, 0.5);">${point.anime.furigana}</p>
                                    <p class="text-gray-300 italic text-base">"${point.anime.english}"</p>
                                </div>
                                
                                <div class="w-full image-upload-container" data-anime="${point.anime.source.replace(/[^a-zA-Z0-9]/g, '')}">
                                    <label for="upload-${index}" class="rounded-lg border-2 border-dashed border-pink-500 bg-pink-900 bg-opacity-20 flex flex-col items-center justify-center text-center p-4 min-h-[150px] w-full cursor-pointer hover:bg-pink-900 hover:bg-opacity-30 transition-all duration-300">
                                        <div class="upload-icon">
                                            <svg class="w-14 h-14 text-pink-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                            </svg>
                                        </div>
                                        <div class="preview-container hidden w-full">
                                            <img class="screenshot-preview max-h-[200px] max-w-full object-contain rounded-lg mx-auto" src="" alt="Anime screenshot">
                                        </div>
                                        <input type="file" id="upload-${index}" class="hidden image-upload" accept="image/*" capture="environment">
                                    </label>
                                </div>
                            </div>
                        </div>
                    `;
                }
                
                // Get progress status for this grammar point
                const progress = getGrammarProgress(point.title);
                const statusClass = progress === 'learned' ? 'bg-green-900 text-green-300 border-green-500' : 
                                    progress === 'reviewing' ? 'bg-yellow-900 text-yellow-300 border-yellow-500' : 
                                    'bg-gray-800 text-gray-400 border-gray-500';
                const statusText = progress === 'learned' ? 'Learned' : 
                                  progress === 'reviewing' ? 'Reviewing' : 
                                  'Not Started';
                
                card.innerHTML = `
                    <div class="p-6">
                        <div class="flex justify-between items-start mb-3">
                            <h2 class="text-xl font-bold">${point.title}</h2>
                            <div class="flex gap-2">
                                <span class="progress-badge text-xs px-2 py-1 rounded-full ${statusClass} border bg-opacity-30">
                                    ${statusText}
                                </span>
                            </div>
                        </div>
                        <p class="text-xl mb-2 text-primary dark:text-primary leading-relaxed" style="text-shadow: 0 0 5px rgba(0, 255, 255, 0.4);">${point.furigana}</p>
                        <p class="text-gray-300 mb-4 text-base">"${point.english}"</p>
                        
                        <div class="explanation hidden">
                            <hr class="my-4 border-gray-200 dark:border-gray-700">
                            <h3 class="font-semibold mb-2">Explanation:</h3>
                            <p class="text-gray-700 dark:text-gray-300">${point.explanation}</p>
                            ${animeExample}
                            
                            <div class="mt-6 pt-4 border-t border-gray-700">
                                <h3 class="font-semibold mb-2">Mark your progress:</h3>
                                <div class="flex flex-wrap gap-2">
                                    <button data-status="not-started" data-grammar="${point.title}" class="progress-btn px-3 py-1 rounded bg-gray-800 text-gray-400 border border-gray-500 hover:bg-gray-700 ${progress === 'not-started' ? 'ring-2 ring-gray-400' : ''}">
                                        Not Started
                                    </button>
                                    <button data-status="reviewing" data-grammar="${point.title}" class="progress-btn px-3 py-1 rounded bg-opacity-30 bg-yellow-900 text-yellow-300 border border-yellow-500 hover:bg-yellow-900 hover:bg-opacity-50 ${progress === 'reviewing' ? 'ring-2 ring-yellow-400' : ''}">
                                        Reviewing
                                    </button>
                                    <button data-status="learned" data-grammar="${point.title}" class="progress-btn px-3 py-1 rounded bg-opacity-30 bg-green-900 text-green-300 border border-green-500 hover:bg-green-900 hover:bg-opacity-50 ${progress === 'learned' ? 'ring-2 ring-green-400' : ''}">
                                        Learned
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="flex items-center justify-between mt-3">
                            <button class="toggle-btn text-primary dark:text-primary hover:text-primary-dark dark:hover:text-primary-dark font-medium focus:outline-none">
                                Show explanation
                            </button>
                            
                            <button class="quiz-this-btn px-3 py-1 text-xs rounded bg-opacity-30 bg-pink-900 border border-pink-500 text-pink-200 hover:bg-opacity-50 transition-all duration-300">
                                Quiz This
                            </button>
                        </div>
                    </div>
                `;
                
                studyContent.appendChild(card);
                
                // Add event listener to toggle explanation
                const toggleBtn = card.querySelector('.toggle-btn');
                const explanation = card.querySelector('.explanation');
                
                toggleBtn.addEventListener('click', () => {
                    const isHidden = explanation.classList.contains('hidden');
                    explanation.classList.toggle('hidden');
                    toggleBtn.textContent = isHidden ? 'Hide explanation' : 'Show explanation';
                });
            });
        }
        
        // Set up image upload functionality once cards are rendered
        function setupImageUploads() {
            document.querySelectorAll('.image-upload').forEach(input => {
                input.addEventListener('change', function(e) {
                    if (this.files && this.files[0]) {
                        const container = this.closest('.image-upload-container');
                        const previewContainer = container.querySelector('.preview-container');
                        const uploadIcon = container.querySelector('.upload-icon');
                        const imgPreview = container.querySelector('.screenshot-preview');
                        
                        const reader = new FileReader();
                        
                        reader.onload = function(e) {
                            // Show the image preview
                            imgPreview.src = e.target.result;
                            uploadIcon.classList.add('hidden');
                            previewContainer.classList.remove('hidden');
                            
                            // Add a subtle glowing effect to the container
                            container.closest('label').classList.add('border-pink-400');
                            container.closest('label').style.boxShadow = '0 0 15px rgba(255, 0, 255, 0.5)';
                            
                            // Add a remove button
                            if (!container.querySelector('.remove-btn')) {
                                const removeBtn = document.createElement('button');
                                removeBtn.className = 'remove-btn absolute top-2 right-2 bg-pink-800 bg-opacity-70 rounded-full p-1 hover:bg-pink-700 transition-colors';
                                removeBtn.innerHTML = `
                                    <svg class="w-4 h-4 text-pink-200" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                    </svg>
                                `;
                                removeBtn.addEventListener('click', function(e) {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    imgPreview.src = '';
                                    uploadIcon.classList.remove('hidden');
                                    previewContainer.classList.add('hidden');
                                    container.querySelector('.image-upload').value = '';
                                    container.closest('label').classList.remove('border-pink-400');
                                    container.closest('label').style.boxShadow = '';
                                    this.remove();
                                });
                                
                                // Add position relative to the label for the absolute positioning of the button
                                container.closest('label').style.position = 'relative';
                                container.closest('label').appendChild(removeBtn);
                            }
                        }
                        
                        reader.readAsDataURL(this.files[0]);
                    }
                });
            });
        }
        
        // Progress tracking functionality 
        function getGrammarProgress(grammarTitle) {
            try {
                const progress = JSON.parse(localStorage.getItem('grammarProgress') || '{}');
                return progress[grammarTitle] || 'not-started';
            } catch (e) {
                console.error("Error getting grammar progress:", e);
                return 'not-started';
            }
        }
        
        function setGrammarProgress(grammarTitle, status) {
            try {
                const progress = JSON.parse(localStorage.getItem('grammarProgress') || '{}');
                progress[grammarTitle] = status;
                localStorage.setItem('grammarProgress', JSON.stringify(progress));
                
                // Update the UI for the affected card
                const progressBadges = document.querySelectorAll(`.grammar-card h2`);
                progressBadges.forEach(heading => {
                    if (heading.textContent === grammarTitle) {
                        const badge = heading.parentElement.querySelector('.progress-badge');
                        if (badge) {
                            // Remove existing classes
                            badge.className = badge.className.replace(/bg-[^\s]+ text-[^\s]+ border-[^\s]+/, '');
                            
                            // Apply new classes based on status
                            const statusClass = status === 'learned' ? 'bg-green-900 text-green-300 border-green-500' : 
                                              status === 'reviewing' ? 'bg-yellow-900 text-yellow-300 border-yellow-500' : 
                                              'bg-gray-800 text-gray-400 border-gray-500';
                            const statusText = status === 'learned' ? 'Learned' : 
                                              status === 'reviewing' ? 'Reviewing' : 
                                              'Not Started';
                            
                            badge.className = `progress-badge text-xs px-2 py-1 rounded-full ${statusClass} border bg-opacity-30`;
                            badge.textContent = statusText;
                        }
                    }
                });
                
                // Update progress buttons within card if visible
                const card = document.querySelector(`.grammar-card h2:contains("${grammarTitle}")`).closest('.grammar-card');
                if (card) {
                    const buttons = card.querySelectorAll('.progress-btn');
                    buttons.forEach(btn => {
                        // Remove any existing rings
                        btn.classList.remove('ring-2', 'ring-gray-400', 'ring-yellow-400', 'ring-green-400');
                        
                        // Add ring to the active button
                        if (btn.dataset.status === status) {
                            if (status === 'learned') {
                                btn.classList.add('ring-2', 'ring-green-400');
                            } else if (status === 'reviewing') {
                                btn.classList.add('ring-2', 'ring-yellow-400');
                            } else {
                                btn.classList.add('ring-2', 'ring-gray-400');
                            }
                        }
                    });
                }
            } catch (e) {
                console.error("Error setting grammar progress:", e);
            }
        }
        
        // Helper function for element selection
        Element.prototype.contains = function(text) {
            return this.textContent.includes(text);
        };
        
        // Setup progress tracking event listeners after the cards are rendered
        function setupProgressTracking() {
            document.querySelectorAll('.progress-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    const status = btn.dataset.status;
                    const grammarTitle = btn.dataset.grammar;
                    setGrammarProgress(grammarTitle, status);
                });
            });
            
            // Set up the Quiz This buttons
            document.querySelectorAll('.quiz-this-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const card = e.target.closest('.grammar-card');
                    const grammarTitle = card.querySelector('h2').textContent;
                    
                    // Find the grammar point in the array
                    const grammarPoint = grammarPoints.find(point => point.title === grammarTitle);
                    if (grammarPoint) {
                        // Switch to quiz mode
                        showMainAppMode('quiz');
                        
                        // Create a quiz with just this grammar point
                        currentQuiz = [grammarPoint];
                        currentQuestionIndex = 0;
                        score = 0;
                        document.getElementById('quizScore').textContent = `Score: 0/0`;
                        
                        // Show the question
                        showQuestion();
                    }
                });
            });
        }
        
        // Add progress filter dropdown
        const searchContainer = document.querySelector('.relative');
        const progressFilterContainer = document.createElement('div');
        progressFilterContainer.className = 'mt-2 flex items-center space-x-2';
        progressFilterContainer.innerHTML = `
            <label class="text-sm text-gray-400">Filter by progress:</label>
            <select id="progressFilter" class="text-sm bg-opacity-30 bg-purple-900 rounded-lg border border-cyan-500 text-cyan-100 py-1 px-2 focus:outline-none focus:ring-2 focus:ring-pink-500">
                <option value="all">All</option>
                <option value="not-started">Not Started</option>
                <option value="reviewing">Reviewing</option>
                <option value="learned">Learned</option>
            </select>
        `;
        searchContainer.after(progressFilterContainer);
        
        // Search and filter functionality
        function filterGrammarCards() {
            const searchInput = document.getElementById('search');
            const searchTerm = searchInput ? searchInput.value.toLowerCase() : '';
            const progressFilter = document.getElementById('progressFilter') ? document.getElementById('progressFilter').value : 'all';
            
            // Apply both filters
            let filteredGrammar = grammarPoints.filter(point => 
                (searchTerm === '' || 
                 point.title.toLowerCase().includes(searchTerm) || 
                 point.japanese.toLowerCase().includes(searchTerm) ||
                 point.english.toLowerCase().includes(searchTerm)) &&
                (progressFilter === 'all' || getGrammarProgress(point.title) === progressFilter)
            );
            
            // Get stats for summary
            const totalGrammar = grammarPoints.length;
            const learnedCount = grammarPoints.filter(point => getGrammarProgress(point.title) === 'learned').length;
            const reviewingCount = grammarPoints.filter(point => getGrammarProgress(point.title) === 'reviewing').length;
            const notStartedCount = grammarPoints.filter(point => getGrammarProgress(point.title) === 'not-started').length;
            
            // Add a progress summary at the top of the study page
            const existingSummary = document.getElementById('progressSummary');
            if (!existingSummary) {
                const progressSummary = document.createElement('div');
                progressSummary.id = 'progressSummary';
                progressSummary.className = 'grid grid-cols-4 gap-2 mb-4 mt-2';
                progressSummary.innerHTML = `
                    <div class="bg-opacity-20 bg-purple-900 rounded-lg p-3 text-center border border-purple-500">
                        <div class="text-2xl font-bold">${totalGrammar}</div>
                        <div class="text-sm text-gray-300">Total Points</div>
                    </div>
                    <div class="bg-opacity-20 bg-green-900 rounded-lg p-3 text-center border border-green-500">
                        <div class="text-2xl font-bold text-green-300">${learnedCount}</div>
                        <div class="text-sm text-gray-300">Learned</div>
                    </div>
                    <div class="bg-opacity-20 bg-yellow-900 rounded-lg p-3 text-center border border-yellow-500">
                        <div class="text-2xl font-bold text-yellow-300">${reviewingCount}</div>
                        <div class="text-sm text-gray-300">Reviewing</div>
                    </div>
                    <div class="bg-opacity-20 bg-gray-800 rounded-lg p-3 text-center border border-gray-500">
                        <div class="text-2xl font-bold text-gray-400">${notStartedCount}</div>
                        <div class="text-sm text-gray-300">Not Started</div>
                    </div>
                `;
                studyContent.parentNode.insertBefore(progressSummary, studyContent);
            } else {
                // Update the counts in the existing summary
                existingSummary.querySelector('.bg-purple-900 .text-2xl').textContent = totalGrammar;
                existingSummary.querySelector('.bg-green-900 .text-2xl').textContent = learnedCount;
                existingSummary.querySelector('.bg-yellow-900 .text-2xl').textContent = reviewingCount;
                existingSummary.querySelector('.bg-gray-800 .text-2xl').textContent = notStartedCount;
            }
            
            renderGrammarCards(filteredGrammar);
        }
        
        // Update event listeners to use combined filter function
        const searchInput = document.getElementById('search');
        if (searchInput) {
            searchInput.addEventListener('input', filterGrammarCards);
        }
        document.getElementById('progressFilter').addEventListener('change', filterGrammarCards);
        
        // Modify setGrammarProgress to update stats after changing progress
        const originalSetGrammarProgress = setGrammarProgress;
        setGrammarProgress = function(grammarTitle, status) {
            originalSetGrammarProgress(grammarTitle, status);
            filterGrammarCards(); // Update stats and filtered cards
        };
        
        // Quiz functionality
        let currentQuiz = [];
        let currentQuestionIndex = 0;
        let score = 0;
        
        function startNewQuiz() {
            // Reset quiz state
            currentQuestionIndex = 0;
            score = 0;
            document.getElementById('quizScore').textContent = `Score: 0/0`;
            
            // Create a random selection of grammar points for the quiz
            currentQuiz = [...grammarPoints]
                .sort(() => Math.random() - 0.5)
                .slice(0, 10); // Use 10 random grammar points
            
            showQuestion();
        }
        
        function showQuestion() {
            const quizOptions = document.getElementById('quizOptions');
            const quizFeedback = document.getElementById('quizFeedback');
            const nextQuestionBtn = document.getElementById('nextQuestionBtn');
            
            // Clear any existing content and hide feedback/buttons
            quizFeedback.classList.add('hidden');
            nextQuestionBtn.classList.add('hidden');
            quizOptions.innerHTML = '';
            
            // Remove previous click listeners from the next button if it exists
            const nextBtn = document.querySelector('#nextQuestionBtn button');
            if (nextBtn) {
                const newNextBtn = nextBtn.cloneNode(true);
                nextBtn.parentNode.replaceChild(newNextBtn, nextBtn);
            }
            
            const currentQuestion = currentQuiz[currentQuestionIndex];
            
            // Display only the grammar pattern without its meaning
            // Extract just the first part before the dash (e.g., "と (to)" instead of "と (to) — And/With")
            const grammarPatternOnly = currentQuestion.title.split('—')[0].trim();
            document.getElementById('questionText').textContent = grammarPatternOnly;
            document.getElementById('questionExample').innerHTML = currentQuestion.furigana;
            
            // Add the English translation to the feedback after answering
            document.getElementById('quizFeedback').dataset.english = currentQuestion.english;
            
            // Generate options (1 correct, 3 random incorrect)
            // Save original explanation for feedback after answering
            const originalExplanation = currentQuestion.explanation;
            
            // Create a version of the explanation without the Japanese characters for quiz options
            // Extract Japanese characters from the title (everything before the dash and parentheses)
            const titleParts = currentQuestion.title.split('(')[0].trim();
            const japaneseChars = titleParts.split(' ').filter(part => /[\u3040-\u30ff\u3400-\u4dbf\u4e00-\u9fff\uf900-\ufaff\uff66-\uff9f]/.test(part));
            
            // Create a masked explanation for the quiz option
            let maskedExplanation = originalExplanation;
            japaneseChars.forEach(char => {
                // Replace Japanese characters with "[Japanese term]" to avoid giving away the answer
                const regex = new RegExp(char, 'g');
                maskedExplanation = maskedExplanation.replace(regex, '[Japanese term]');
            });
            
            // Store both versions for later use
            currentQuestion.originalExplanation = originalExplanation;
            currentQuestion.maskedExplanation = maskedExplanation;
            
            const correctAnswer = maskedExplanation;
            const incorrectOptions = grammarPoints
                .filter(point => point.title !== currentQuestion.title)
                .sort(() => Math.random() - 0.5)
                .slice(0, 3)
                .map(point => {
                    // Also mask the incorrect options to keep consistent style
                    const jpChars = point.title.split('(')[0].trim().split(' ').filter(part => 
                        /[\u3040-\u30ff\u3400-\u4dbf\u4e00-\u9fff\uf900-\ufaff\uff66-\uff9f]/.test(part)
                    );
                    
                    let masked = point.explanation;
                    jpChars.forEach(char => {
                        const regex = new RegExp(char, 'g');
                        masked = masked.replace(regex, '[Japanese term]');
                    });
                    
                    return masked;
                });
            
            const allOptions = [correctAnswer, ...incorrectOptions]
                .sort(() => Math.random() - 0.5);
            
            // Render options
            allOptions.forEach((option, index) => {
                const optionEl = document.createElement('div');
                optionEl.className = 'option p-4 border border-gray-300 dark:border-gray-700 rounded-lg cursor-pointer hover:border-primary';
                optionEl.textContent = option;
                optionEl.dataset.option = option;
                optionEl.dataset.correct = (option === correctAnswer).toString();
                
                optionEl.addEventListener('click', handleQuizOption);
                quizOptions.appendChild(optionEl);
            });
        }
        
        function handleQuizOption(event) {
            const clickedOption = event.currentTarget;
            const quizOptions = document.getElementById('quizOptions');
            const quizFeedback = document.getElementById('quizFeedback');
            const nextQuestionBtn = document.getElementById('nextQuestionBtn');
            
            // Get all options and remove hover effects
            const allOptionEls = quizOptions.querySelectorAll('.option');
            allOptionEls.forEach(el => el.classList.remove('hover:border-primary'));
            
            // Check if answer is correct
            const isCorrect = clickedOption.dataset.correct === "true";
            
            // Apply correct/incorrect styling
            allOptionEls.forEach(el => {
                if (el.dataset.correct === "true") {
                    el.classList.add('correct');
                } else if (el === clickedOption) {
                    el.classList.add('incorrect');
                }
            });
            
            // Update score
            if (isCorrect) {
                score++;
            }
            document.getElementById('quizScore').textContent = `Score: ${score}/${currentQuestionIndex + 1}`;
            
            // Get the current grammar pattern from the title
            const currentQuestion = currentQuiz[currentQuestionIndex];
            const grammarPattern = document.getElementById('questionText').textContent;
            const englishTranslation = quizFeedback.dataset.english;
            
            // Show feedback with the English translation and the original explanation
            quizFeedback.innerHTML = isCorrect 
                ? `<div class="text-green-600 dark:text-green-400 font-medium">Correct! 👍</div>
                   <div class="mt-2 font-medium">Translation: "${englishTranslation}"</div>
                   <div class="mt-2">${currentQuestion.originalExplanation}</div>` 
                : `<div class="text-red-600 dark:text-red-400 font-medium">Incorrect! The right meaning is:</div>
                   <div class="mt-2 font-medium">Translation: "${englishTranslation}"</div>
                   <div class="mt-2">${currentQuestion.originalExplanation}</div>`;
            
            // Add practice sentence box
            quizFeedback.innerHTML += `
                <div class="mt-6 border-t border-pink-500 pt-4">
                    <div class="text-cyan-300 font-medium mb-2">Practice with this grammar pattern:</div>
                    <p class="text-gray-300 mb-2">Write your own sentence using ${grammarPattern}</p>
                    <textarea 
                        id="practiceSentence" 
                        class="w-full p-3 bg-opacity-30 bg-purple-900 border border-cyan-500 rounded-lg text-base text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-pink-500 focus:border-pink-400"
                        rows="3" 
                        placeholder="例: ${currentQuestion.japanese || 'Write your sentence here...'}"
                    ></textarea>
                    <button id="saveToNotes" class="mt-3 py-2 px-4 rounded-lg border border-pink-500 bg-opacity-20 bg-pink-900 text-pink-100 hover:bg-opacity-30 transition-all duration-300">
                        💾 Save to My Notes
                    </button>
                    <div id="saveConfirmation" class="hidden mt-2 text-green-400 text-sm">Saved to your notes! ✨</div>
                </div>
            `;
            
            quizFeedback.classList.remove('hidden');
            
            // Set up the Save to Notes button functionality
            setTimeout(() => {
                const saveBtn = document.getElementById('saveToNotes');
                if (saveBtn) {
                    saveBtn.addEventListener('click', () => {
                        const sentence = document.getElementById('practiceSentence').value.trim();
                        if (sentence) {
                            // In a full app, we would save this to local storage or a database
                            // For now, we'll just show a confirmation message
                            const confirmation = document.getElementById('saveConfirmation');
                            confirmation.classList.remove('hidden');
                            
                            // Optionally, store in localStorage
                            try {
                                const savedNotes = JSON.parse(localStorage.getItem('grammarNotes') || '[]');
                                savedNotes.push({
                                    grammar: grammarPattern,
                                    sentence: sentence,
                                    date: new Date().toISOString()
                                });
                                localStorage.setItem('grammarNotes', JSON.stringify(savedNotes));
                            } catch (e) {
                                // Silently fail if localStorage is not available
                                console.log("Could not save to localStorage");
                            }
                            
                            // Add a glow effect to the textarea for feedback
                            const textarea = document.getElementById('practiceSentence');
                            textarea.style.boxShadow = '0 0 15px rgba(0, 255, 255, 0.5)';
                            setTimeout(() => {
                                textarea.style.boxShadow = '';
                            }, 1000);
                        }
                    });
                }
            }, 0);
            
            // Disable further clicks
            allOptionEls.forEach(el => {
                el.removeEventListener('click', handleQuizOption);
                el.style.pointerEvents = 'none';
            });
            
            // Show next question button
            nextQuestionBtn.classList.remove('hidden');
            const nextBtn = document.querySelector('#nextQuestionBtn button');
            
            // Set up the next button functionality
            if (currentQuestionIndex < currentQuiz.length - 1) {
                nextBtn.textContent = 'Next Question';
                nextBtn.onclick = () => {
                    currentQuestionIndex++;
                    showQuestion();
                };
            } else {
                // Show final score
                nextBtn.textContent = 'Quiz Complete! Try Again?';
                nextBtn.onclick = startNewQuiz;
            }
        }
        
        // New Quiz button
        document.getElementById('newQuizBtn').addEventListener('click', startNewQuiz);
        
        // =====================================================
        // JLPT TEST CODE
        // =====================================================
        
        // JLPT N5 Test data structure
        // Make this globally accessible to avoid scoping issues
        window.jlptN5Test = {
            languageKnowledge: [
                {
                    id: "grammar-1",
                    type: "grammar",
                    question: {
                        japanese: "わたしは 毎日 学校（　）行きます。"
                    },
                    options: [
                        { id: 1, text: "を", correct: false },
                        { id: 2, text: "に", correct: true },
                        { id: 3, text: "の", correct: false },
                        { id: 4, text: "か", correct: false }
                    ]
                },
                {
                    id: "grammar-2",
                    type: "grammar",
                    question: {
                        japanese: "これは 田中さん（　）かばんです。"
                    },
                    options: [
                        { id: 1, text: "に", correct: false },
                        { id: 2, text: "へ", correct: false },
                        { id: 3, text: "の", correct: true },
                        { id: 4, text: "と", correct: false }
                    ]
                },
                {
                    id: "grammar-3",
                    type: "grammar",
                    question: {
                        japanese: "わたし（　）ペンがあります。"
                    },
                    options: [
                        { id: 1, text: "は", correct: false },
                        { id: 2, text: "に", correct: true },
                        { id: 3, text: "を", correct: false },
                        { id: 4, text: "が", correct: false }
                    ]
                },
                {
                    id: "grammar-4",
                    type: "grammar",
                    question: {
                        japanese: "テレビ（　）見ます。"
                    },
                    options: [
                        { id: 1, text: "に", correct: false },
                        { id: 2, text: "へ", correct: false },
                        { id: 3, text: "を", correct: true },
                        { id: 4, text: "は", correct: false }
                    ]
                },
                {
                    id: "grammar-5",
                    type: "grammar",
                    question: {
                        japanese: "友だち（　）いっしょに映画を見ました。"
                    },
                    options: [
                        { id: 1, text: "に", correct: false },
                        { id: 2, text: "と", correct: true },
                        { id: 3, text: "を", correct: false },
                        { id: 4, text: "が", correct: false }
                    ]
                },
                {
                    id: "grammar-6",
                    type: "grammar",
                    question: {
                        japanese: "わたしは 京都（　）行きたいです。"
                    },
                    options: [
                        { id: 1, text: "を", correct: false },
                        { id: 2, text: "に", correct: true },
                        { id: 3, text: "が", correct: false },
                        { id: 4, text: "で", correct: false }
                    ]
                },
                {
                    id: "vocabulary-1",
                    type: "vocabulary",
                    question: {
                        japanese: "「きのう」の 反対は 何ですか。"
                    },
                    options: [
                        { id: 1, text: "おととい", correct: false },
                        { id: 2, text: "きょう", correct: false },
                        { id: 3, text: "あした", correct: true },
                        { id: 4, text: "まいにち", correct: false }
                    ]
                },
                {
                    id: "vocabulary-2",
                    type: "vocabulary",
                    question: {
                        japanese: "「あたたかい」の 反対は 何ですか。"
                    },
                    options: [
                        { id: 1, text: "つめたい", correct: true },
                        { id: 2, text: "さむい", correct: false },
                        { id: 3, text: "あつい", correct: false },
                        { id: 4, text: "すずしい", correct: false }
                    ]
                },
                {
                    id: "vocabulary-3",
                    type: "vocabulary",
                    question: {
                        japanese: "きょうは 月曜日です。あしたは＿＿です。"
                    },
                    options: [
                        { id: 1, text: "日曜日", correct: false },
                        { id: 2, text: "火曜日", correct: true },
                        { id: 3, text: "水曜日", correct: false },
                        { id: 4, text: "木曜日", correct: false }
                    ]
                },
                {
                    id: "vocabulary-4",
                    type: "vocabulary",
                    question: {
                        japanese: "この かばんは いくらですか。500（　　）です。"
                    },
                    options: [
                        { id: 1, text: "えん", correct: true },
                        { id: 2, text: "にち", correct: false },
                        { id: 3, text: "じかん", correct: false },
                        { id: 4, text: "ねん", correct: false }
                    ]
                },
                {
                    id: "vocabulary-5",
                    type: "vocabulary",
                    question: {
                        japanese: "日本語を（　　）します。"
                    },
                    options: [
                        { id: 1, text: "べんきょう", correct: true },
                        { id: 2, text: "しごと", correct: false },
                        { id: 3, text: "でんわ", correct: false },
                        { id: 4, text: "せんたく", correct: false }
                    ]
                }
            ],
            reading: [
                {
                    id: "reading-1",
                    type: "reading",
                    text: "たなかさんは 東京に 住んでいます。たなかさんは 毎日 会社に 行きます。会社は 駅から 近いです。駅から 会社まで 歩いて 10分です。たなかさんは 毎朝 7時に 家を 出ます。会社は 9時から 始まります。",
                    question: {
                        japanese: "たなかさんの 会社は どこに ありますか。"
                    },
                    options: [
                        { id: 1, text: "東京に あります", correct: false },
                        { id: 2, text: "駅から 近い ところに あります", correct: true },
                        { id: 3, text: "家から 近い ところに あります", correct: false },
                        { id: 4, text: "7時に 開きます", correct: false }
                    ]
                },
                {
                    id: "reading-2",
                    type: "reading",
                    text: "わたしは 毎日 ８時に 家を 出ます。家から 駅まで １０分 かかります。駅で 電車に 乗ります。電車で 学校まで ３０分 かかります。毎日 ９時に 学校に 着きます。",
                    question: {
                        japanese: "家から 学校まで 何分 かかりますか。"
                    },
                    options: [
                        { id: 1, text: "１０分", correct: false },
                        { id: 2, text: "３０分", correct: false },
                        { id: 3, text: "４０分", correct: true },
                        { id: 4, text: "９０分", correct: false }
                    ]
                },
                {
                    id: "reading-3",
                    type: "reading",
                    text: "昨日、母の誕生日でした。わたしは花と本をプレゼントしました。母はとても喜びました。夜、家族で外のレストランで食事をしました。レストランはにぎやかでした。食事はおいしかったです。",
                    question: {
                        japanese: "誕生日の人は誰ですか。"
                    },
                    options: [
                        { id: 1, text: "わたし", correct: false },
                        { id: 2, text: "母", correct: true },
                        { id: 3, text: "父", correct: false },
                        { id: 4, text: "家族", correct: false }
                    ]
                },
                {
                    id: "reading-4",
                    type: "reading",
                    text: "山田さんは 朝 パンを 食べます。昼ご飯は 会社の 近くの レストランで 食べます。夜は 家で 料理を します。山田さんは 料理が 上手です。",
                    question: {
                        japanese: "山田さんは どこで 昼ご飯を 食べますか。"
                    },
                    options: [
                        { id: 1, text: "家", correct: false },
                        { id: 2, text: "会社", correct: false },
                        { id: 3, text: "レストラン", correct: true },
                        { id: 4, text: "学校", correct: false }
                    ]
                }
            ],
            listening: [
                {
                    id: "listening-1",
                    type: "listening",
                    conversation: [
                        { speaker: "女の人", text: "すみません、駅はどこですか。" },
                        { speaker: "男の人", text: "あそこを右に曲がって、まっすぐ行くと駅です。" },
                        { speaker: "女の人", text: "遠いですか。" },
                        { speaker: "男の人", text: "いいえ、歩いて5分ぐらいです。" }
                    ],
                    question: {
                        japanese: "駅まで どのぐらい かかりますか。"
                    },
                    options: [
                        { id: 1, text: "10分", correct: false },
                        { id: 2, text: "5分ぐらい", correct: true },
                        { id: 3, text: "15分", correct: false },
                        { id: 4, text: "30分", correct: false }
                    ]
                },
                {
                    id: "listening-2",
                    type: "listening",
                    conversation: [
                        { speaker: "男の人", text: "すみません、この電車は大阪に行きますか。" },
                        { speaker: "女の人", text: "いいえ、大阪じゃないです。京都に行きます。" },
                        { speaker: "男の人", text: "大阪に行く電車は何時ですか。" },
                        { speaker: "女の人", text: "3時です。あと30分です。" }
                    ],
                    question: {
                        japanese: "大阪に行く電車は何時ですか。"
                    },
                    options: [
                        { id: 1, text: "2時30分", correct: false },
                        { id: 2, text: "3時", correct: true },
                        { id: 3, text: "3時30分", correct: false },
                        { id: 4, text: "4時", correct: false }
                    ]
                },
                {
                    id: "listening-3",
                    type: "listening",
                    conversation: [
                        { speaker: "女の人", text: "いらっしゃいませ。" },
                        { speaker: "男の人", text: "このTシャツはいくらですか。" },
                        { speaker: "女の人", text: "それは1500円です。" },
                        { speaker: "男の人", text: "じゃあ、これを2枚ください。" }
                    ],
                    question: {
                        japanese: "男の人は何をいくつ買いますか。"
                    },
                    options: [
                        { id: 1, text: "Tシャツを1枚", correct: false },
                        { id: 2, text: "Tシャツを2枚", correct: true },
                        { id: 3, text: "Tシャツを3枚", correct: false },
                        { id: 4, text: "Tシャツを4枚", correct: false }
                    ]
                },
                {
                    id: "listening-4",
                    type: "listening",
                    conversation: [
                        { speaker: "男の人", text: "田中さん、明日の午後、時間がありますか。" },
                        { speaker: "女の人", text: "午後ですか。何時ですか。" },
                        { speaker: "男の人", text: "2時から3時までです。" },
                        { speaker: "女の人", text: "2時から3時までですね。はい、大丈夫です。" }
                    ],
                    question: {
                        japanese: "田中さんは明日の何時に時間がありますか。"
                    },
                    options: [
                        { id: 1, text: "午前2時から3時まで", correct: false },
                        { id: 2, text: "午後1時から2時まで", correct: false },
                        { id: 3, text: "午後2時から3時まで", correct: true },
                        { id: 4, text: "午後3時から4時まで", correct: false }
                    ]
                }
            ]
        };
        
        // Default question counts (can be changed by user)
        let testConfiguration = {
            languageKnowledge: 5,
            reading: 2,
            listening: 2
        };
        
        // Test state
        let currentSection = "language-knowledge";
        let currentQuestionIndices = {
            "language-knowledge": 0,
            "reading": 0,
            "listening": 0
        };
        let answers = {};
        let testTimer;
        let remainingTime = 25 * 60; // 25 minutes in seconds
        
        // JLPT test initialization
        function initTest() {
            try {
                // Check if window.jlptN5Test is valid and accessible
                if (!window.jlptN5Test) {
                    console.error("jlptN5Test is not defined in global scope");
                    return;
                }
                
                // Check if data structure has required sections
                if (!window.jlptN5Test.languageKnowledge || 
                    !window.jlptN5Test.reading || 
                    !window.jlptN5Test.listening) {
                    console.error("Test data structure is missing required sections");
                    return;
                }
                
                // Verify each section contains array data
                if (!Array.isArray(window.jlptN5Test.languageKnowledge) ||
                    !Array.isArray(window.jlptN5Test.reading) ||
                    !Array.isArray(window.jlptN5Test.listening)) {
                    console.error("Test sections are not arrays");
                    return;
                }
                
                // Log section lengths for debugging
                console.log("Available questions:", {
                    languageKnowledge: window.jlptN5Test.languageKnowledge.length,
                    reading: window.jlptN5Test.reading.length,
                    listening: window.jlptN5Test.listening.length
                });
                
                // Create an explicit instance of selected questions
                let selectedLangKnowledge = selectRandomQuestions(
                    window.jlptN5Test.languageKnowledge, 
                    testConfiguration.languageKnowledge
                );
                
                let selectedReading = selectRandomQuestions(
                    window.jlptN5Test.reading, 
                    testConfiguration.reading
                );
                
                let selectedListening = selectRandomQuestions(
                    window.jlptN5Test.listening, 
                    testConfiguration.listening
                );
                
                // Verify non-empty results
                if (selectedLangKnowledge.length === 0) {
                    console.error("Failed to select language knowledge questions");
                    selectedLangKnowledge = window.jlptN5Test.languageKnowledge.slice(0, 1);
                }
                
                if (selectedReading.length === 0) {
                    console.error("Failed to select reading questions");
                    selectedReading = window.jlptN5Test.reading.slice(0, 1);
                }
                
                if (selectedListening.length === 0) {
                    console.error("Failed to select listening questions");
                    selectedListening = window.jlptN5Test.listening.slice(0, 1);
                }
                
                // Create the test questions object explicitly
                window.currentTestQuestions = {
                    "language-knowledge": selectedLangKnowledge,
                    "reading": selectedReading,
                    "listening": selectedListening
                };
                
                // Log the selected questions for debugging
                console.log("Selected test questions:", JSON.stringify({
                    languageKnowledge: window.currentTestQuestions["language-knowledge"].length,
                    reading: window.currentTestQuestions["reading"].length,
                    listening: window.currentTestQuestions["listening"].length
                }));
                
                // Reset question indices
                currentQuestionIndices = {
                    "language-knowledge": 0,
                    "reading": 0,
                    "listening": 0
                };
                
                // Reset answers
                answers = {};
                
                // Setup tab navigation
                document.querySelectorAll('.tab-btn').forEach(btn => {
                    btn.addEventListener('click', () => {
                        const targetSection = btn.dataset.section;
                        switchSection(targetSection);
                    });
                });
                
                // Set up Next/Prev buttons with cloned elements to remove old event listeners
                setupNavigationButtons();
                
                // Set up options click handler for JLPT test
                document.addEventListener('click', function(e) {
                    const optionEl = e.target.closest('#jlpt-content .option');
                    if (optionEl && !optionEl.classList.contains('correct') && !optionEl.classList.contains('incorrect')) {
                        handleJLPTOptionClick(optionEl);
                    }
                });
                
                // Set up retry button for JLPT test
                const retryButton = document.getElementById('retry-test');
                if (retryButton) {
                    retryButton.addEventListener('click', resetTest);
                }
                
                // Start the timer with configured time
                startTimer();
                
                // Update the question counter
                updateQuestionCounter();
                
                // Load the first question
                loadCurrentQuestion();
                
            } catch (error) {
                console.error("Error initializing JLPT test:", error);
                console.error("Error details:", error.stack);
            }
        }
        
        // Select random questions from the question pool
        function selectRandomQuestions(questions, count) {
            // Defensive check to make sure questions exists and is an array
            if (!questions || !Array.isArray(questions)) {
                console.log("Invalid questions data:", questions);
                return [];
            }
            
            // Make sure we don't try to select more questions than are available
            const actualCount = Math.min(questions.length, count);
            
            // Create a copy of the questions array and shuffle it
            const shuffled = [...questions].sort(() => Math.random() - 0.5);
            
            // Return the requested number of questions
            return shuffled.slice(0, actualCount);
        }
        
        function setupNavigationButtons() {
            // Remove old event listeners by cloning and replacing elements
            document.querySelectorAll('#jlpt-content .next-btn').forEach(btn => {
                const newBtn = btn.cloneNode(true);
                btn.parentNode.replaceChild(newBtn, btn);
                
                newBtn.addEventListener('click', function(e) {
                    e.stopPropagation(); // Prevent event bubbling
                    nextQuestion();
                });
            });
            
            document.querySelectorAll('#jlpt-content .prev-btn').forEach(btn => {
                const newBtn = btn.cloneNode(true);
                btn.parentNode.replaceChild(newBtn, btn);
                
                newBtn.addEventListener('click', function(e) {
                    e.stopPropagation(); // Prevent event bubbling
                    prevQuestion();
                });
            });
        }
        
        function switchSection(section) {
            // Update active tab
            document.querySelectorAll('.tab-btn').forEach(btn => {
                if (btn.dataset.section === section) {
                    btn.classList.add('tab-active');
                } else {
                    btn.classList.remove('tab-active');
                }
            });
            
            // Hide all sections and show the target section
            const sections = {
                "language-knowledge": document.getElementById('language-knowledge-section'),
                "reading": document.getElementById('reading-section'),
                "listening": document.getElementById('listening-section'),
                "results": document.getElementById('results-section')
            };
            
            Object.values(sections).forEach(sectionEl => {
                sectionEl.classList.add('hidden');
            });
            
            sections[section].classList.remove('hidden');
            
            // Update current section
            currentSection = section;
            
            // Load the current question for the new section
            loadCurrentQuestion();
            
            // Update navigation buttons
            updateNavigationButtons();
            
            // Update question counter
            updateQuestionCounter();
        }
        
        function loadCurrentQuestion() {
            // Use selected questions from window.currentTestQuestions instead of the full jlptN5Test
            // Make sure window.currentTestQuestions exists and has the current section
            if (!window.currentTestQuestions || !window.currentTestQuestions[currentSection]) {
                console.log("No test questions available for section:", currentSection);
                return;
            }
            
            const sectionData = window.currentTestQuestions[currentSection];
            if (!sectionData || !Array.isArray(sectionData) || sectionData.length === 0) {
                console.log("No questions available in section data:", currentSection);
                return;
            }
            
            const currentIndex = currentQuestionIndices[currentSection];
            if (currentIndex >= sectionData.length) return;
            
            const currentQuestion = sectionData[currentIndex];
            if (!currentQuestion) {
                console.log("Question not found at index:", currentIndex);
                return;
            }
            
            // Get the section container
            const sectionEl = document.getElementById(`${currentSection}-section`);
            if (!sectionEl) {
                console.log("Section element not found:", currentSection);
                return;
            }
            
            const questionContainer = sectionEl.querySelector('.jlpt-card');
            if (!questionContainer) {
                console.log("Question container not found in section:", currentSection);
                return;
            }
            
            // Clear previous content
            questionContainer.innerHTML = '';
            
            // Create new question content
            let questionHTML = '';
            
            // Section title
            if (currentSection === 'language-knowledge') {
                const questionType = currentQuestion.type === 'grammar' ? '文法' : '語彙';
                questionHTML += `<h2 class="text-xl font-semibold mb-4">文法・語彙 (${questionType})</h2>`;
            } else if (currentSection === 'reading') {
                questionHTML += `<h2 class="text-xl font-semibold mb-4">読解</h2>`;
            } else if (currentSection === 'listening') {
                questionHTML += `<h2 class="text-xl font-semibold mb-4">聴解</h2>`;
            }
            
            // Question container
            questionHTML += `<div class="current-question" data-question-id="${currentQuestion.id}">`;
            
            // Question number and instruction
            const questionNumber = currentIndex + 1;
            if (currentSection === 'language-knowledge') {
                questionHTML += `<p class="text-lg mb-1">問題 ${questionNumber}: 次の文の（　）に入る最もよいものを、1・2・3・4から一つ選びなさい。</p>`;
            } else if (currentSection === 'reading') {
                questionHTML += `<p class="text-lg mb-1">問題 ${questionNumber}: 次の文章を読んで、質問に答えなさい。</p>`;
            } else if (currentSection === 'listening') {
                questionHTML += `<p class="text-lg mb-1">問題 ${questionNumber}: 会話をよく聞いて、質問に答えなさい。</p>`;
            }
            
            // Question text - add null checks for all object accesses
            if (currentSection === 'language-knowledge' && currentQuestion.question && currentQuestion.question.japanese) {
                questionHTML += `
                    <div class="question-text my-4 p-4 bg-opacity-20 bg-blue-900 rounded-lg">
                        <p class="text-xl leading-relaxed" style="text-shadow: 0 0 5px rgba(0, 255, 255, 0.4);">
                            ${currentQuestion.question.japanese}
                        </p>
                    </div>
                `;
            } else if (currentSection === 'reading' && currentQuestion.text && currentQuestion.question && currentQuestion.question.japanese) {
                questionHTML += `
                    <div class="reading-text my-4 p-4 bg-opacity-20 bg-blue-900 rounded-lg">
                        <p class="text-lg leading-relaxed" style="text-shadow: 0 0 5px rgba(0, 255, 255, 0.4);">
                            ${currentQuestion.text}
                        </p>
                    </div>
                    <div class="question my-4">
                        <p class="text-lg font-medium">${currentQuestion.question.japanese}</p>
                    </div>
                `;
            } else if (currentSection === 'listening' && currentQuestion.conversation && Array.isArray(currentQuestion.conversation) && currentQuestion.question && currentQuestion.question.japanese) {
                questionHTML += `
                    <div class="listening-text my-4 p-4 bg-opacity-20 bg-blue-900 rounded-lg text-center">
                        <div class="conversation text-left max-w-lg mx-auto">
                            ${currentQuestion.conversation.map(line => 
                                `<p class="mb-2"><span class="font-bold">${line.speaker || 'Speaker'}：</span>${line.text || ''}</p>`
                            ).join('')}
                        </div>
                    </div>
                    <div class="question my-4">
                        <p class="text-lg font-medium">${currentQuestion.question.japanese}</p>
                    </div>
                `;
            }
            
            // Options - verify options array exists and is an array
            if (currentQuestion.options && Array.isArray(currentQuestion.options)) {
                questionHTML += `<div class="options space-y-3 mt-6">`;
                currentQuestion.options.forEach(option => {
                    if (option) {
                        questionHTML += `
                            <div class="option p-4 rounded-lg cursor-pointer" data-correct="${option.correct || false}">
                                <span class="option-number inline-block w-6 h-6 rounded-full bg-blue-900 text-white text-center mr-2">${option.id || ''}</span>
                                <span class="text-lg">${option.text || ''}</span>
                            </div>
                        `;
                    }
                });
                questionHTML += `</div>`;
            }
            
            questionHTML += `</div>`;
            
            // Set the HTML
            questionContainer.innerHTML = questionHTML;
            
            // Update navigation buttons
            updateNavigationButtons();
        }
        
        function handleJLPTOptionClick(optionEl) {
            console.log("Option clicked in JLPT test:", optionEl);
            
            // Get all options in the current question
            const allOptions = optionEl.closest('.options').querySelectorAll('.option');
            
            // Find the correct option
            const correctOption = Array.from(allOptions).find(option => 
                option.dataset.correct === "true"
            );
            
            // Check if this option is correct
            const isCorrect = optionEl.dataset.correct === "true";
            
            // Apply styling to show correct/incorrect answers
            if (correctOption) {
                correctOption.classList.add('correct');
            }
            
            if (!isCorrect) {
                optionEl.classList.add('incorrect');
            }
            
            // Disable further clicks
            allOptions.forEach(option => {
                option.style.pointerEvents = 'none';
            });
            
            // Store the answer
            const questionId = optionEl.closest('.current-question').dataset.questionId;
            answers[questionId] = {
                selected: optionEl.querySelector('.option-number').textContent.trim(),
                correct: isCorrect
            };
            
            // Make sure the next button is enabled and clearly visible
            const nextBtn = document.querySelector(`#${currentSection}-section .next-btn`);
            if (nextBtn) {
                nextBtn.classList.add('bg-jlpt-blue', 'hover:bg-blue-600');
                nextBtn.style.pointerEvents = 'auto';
                nextBtn.style.cursor = 'pointer';
            }
            
            // Update progress bar
            updateProgress();
        }
        
        function nextQuestion() {
            try {
                // Increment the current question index
                currentQuestionIndices[currentSection]++;
                
                // Check if we've reached the end of the section
                // Use window.currentTestQuestions instead of jlptN5Test
                if (!window.currentTestQuestions || !window.currentTestQuestions[currentSection]) {
                    console.error("No test questions available for section when advancing:", currentSection);
                    return;
                }
                
                const sectionData = window.currentTestQuestions[currentSection];
                if (!sectionData || !Array.isArray(sectionData)) {
                    console.error("Invalid section data when advancing:", currentSection);
                    return;
                }
                
                if (currentQuestionIndices[currentSection] >= sectionData.length) {
                    // Move to the next section or show results
                    const sections = Object.keys(window.currentTestQuestions);
                    const currentSectionIndex = sections.indexOf(currentSection);
                    
                    if (currentSectionIndex < sections.length - 1) {
                        // Move to the next section
                        switchSection(sections[currentSectionIndex + 1]);
                    } else {
                        // Show results
                        showResults();
                    }
                } else {
                    // Load the next question
                    loadCurrentQuestion();
                    
                    // Update navigation buttons
                    updateNavigationButtons();
                    
                    // Update question counter
                    updateQuestionCounter();
                }
            } catch (error) {
                console.error("Error in nextQuestion:", error);
            }
        }
        
        function prevQuestion() {
            // Decrement the current question index if it's greater than 0
            if (currentQuestionIndices[currentSection] > 0) {
                currentQuestionIndices[currentSection]--;
                
                // Load the previous question
                loadCurrentQuestion();
                
                // Update navigation buttons
                updateNavigationButtons();
                
                // Update question counter
                updateQuestionCounter();
            } else {
                // Check if we can go to the previous section
                const sections = Object.keys(jlptN5Test);
                const currentSectionIndex = sections.indexOf(currentSection);
                
                if (currentSectionIndex > 0) {
                    // Move to the previous section, last question
                    const prevSection = sections[currentSectionIndex - 1];
                    currentQuestionIndices[prevSection] = jlptN5Test[prevSection].length - 1;
                    switchSection(prevSection);
                }
            }
        }
        
        function updateNavigationButtons() {
            try {
                // Get the navigation buttons for the current section
                const sectionEl = document.getElementById(`${currentSection}-section`);
                if (!sectionEl) {
                    console.error("Section element not found for:", currentSection);
                    return;
                }
                
                const prevBtn = sectionEl.querySelector('.prev-btn');
                const nextBtn = sectionEl.querySelector('.next-btn');
                
                if (!prevBtn || !nextBtn) {
                    console.error("Navigation buttons not found");
                    return;
                }
                
                // First determine which data source to use
                const testData = window.currentTestQuestions || window.jlptN5Test;
                if (!testData) {
                    console.error("No test data available for navigation");
                    return;
                }
                
                const sections = Object.keys(testData);
                if (!sections.length) {
                    console.error("No sections available in test data");
                    return;
                }
                
                // Enable/disable previous button based on the current question index
                const isFirstSection = sections.indexOf(currentSection) === 0;
                const isFirstQuestion = currentQuestionIndices[currentSection] === 0;
                prevBtn.disabled = isFirstQuestion && isFirstSection;
                
                // Make sure next button is NEVER disabled
                nextBtn.disabled = false;
                nextBtn.style.pointerEvents = 'auto';
                nextBtn.style.cursor = 'pointer';
                
                // Update the text of the next button for the last question
                let isLastSection = false;
                let isLastQuestion = false;
                
                if (testData && testData[currentSection] && Array.isArray(testData[currentSection])) {
                    isLastSection = sections.indexOf(currentSection) === sections.length - 1;
                    isLastQuestion = currentQuestionIndices[currentSection] === testData[currentSection].length - 1;
                }
                
                if (isLastSection && isLastQuestion) {
                    nextBtn.textContent = "終了";
                } else {
                    nextBtn.textContent = "次の問題";
                }
            } catch (error) {
                console.error("Error in updateNavigationButtons:", error);
            }
        }
        
        function updateQuestionCounter() {
            // Use the current test questions from the configuration
            const testQuestions = window.currentTestQuestions || {};
            
            // Calculate the current question number across all sections
            let currentQuestionNumber = 1;
            let totalQuestions = 0;
            
            if (testQuestions) {
                const sections = Object.keys(testQuestions);
                
                // First calculate total questions to avoid "length" errors on undefined arrays
                sections.forEach(section => {
                    const sectionQuestions = testQuestions[section];
                    if (sectionQuestions && Array.isArray(sectionQuestions)) {
                        totalQuestions += sectionQuestions.length;
                    }
                });
                
                // Then calculate current question position
                for (let i = 0; i < sections.length; i++) {
                    const section = sections[i];
                    const sectionQuestions = testQuestions[section];
                    
                    if (section === currentSection) {
                        currentQuestionNumber += currentQuestionIndices[section];
                        break;
                    } else if (sectionQuestions && Array.isArray(sectionQuestions)) {
                        currentQuestionNumber += sectionQuestions.length;
                    }
                }
            } else {
                // Fallback to configuration if test questions aren't available
                totalQuestions = testConfiguration.languageKnowledge + 
                                testConfiguration.reading + 
                                testConfiguration.listening;
            }
            
            // Update the counter display with defensive check for element
            const counterElement = document.querySelector('.question-counter');
            if (counterElement) {
                counterElement.textContent = `${currentQuestionNumber}/${totalQuestions}`;
            }
        }
        
        function updateProgress() {
            // Calculate progress as percentage of answered questions
            const totalQuestions = Object.values(jlptN5Test).reduce((sum, sectionQuestions) => sum + sectionQuestions.length, 0);
            const answeredQuestions = Object.keys(answers).length;
            const progressPercentage = (answeredQuestions / totalQuestions) * 100;
            
            // Update progress bar
            document.querySelector('.progress-fill').style.width = `${progressPercentage}%`;
        }
        
        function startTimer() {
            // Update timer display
            updateTimerDisplay();
            
            // Start the countdown
            testTimer = setInterval(() => {
                remainingTime--;
                
                // Update timer display
                updateTimerDisplay();
                
                // Check if time is up
                if (remainingTime <= 0) {
                    clearInterval(testTimer);
                    showResults();
                }
            }, 1000);
            
            // Store the timer ID in window for cleanup
            window.testTimer = testTimer;
        }
        
        function updateTimerDisplay() {
            const minutes = Math.floor(remainingTime / 60);
            const seconds = remainingTime % 60;
            const timerDisplay = document.querySelector('.timer');
            timerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            
            // Change color when time is running low
            if (remainingTime < 300) { // Less than 5 minutes
                timerDisplay.classList.add('text-jlpt-red');
            }
        }
        
        function showResults() {
            // Hide all section elements
            const sections = {
                "language-knowledge": document.getElementById('language-knowledge-section'),
                "reading": document.getElementById('reading-section'),
                "listening": document.getElementById('listening-section'),
                "results": document.getElementById('results-section')
            };
            
            Object.values(sections).forEach(sectionEl => {
                sectionEl.classList.add('hidden');
            });
            
            // Show results section
            sections.results.classList.remove('hidden');
            
            // Stop the timer
            clearInterval(testTimer);
            
            // Calculate scores
            calculateAndDisplayScores();
        }
        
        function calculateAndDisplayScores() {
            // Calculate scores for each section and overall
            const sectionScores = {};
            let totalCorrect = 0;
            let totalQuestions = 0;
            
            // Use window.currentTestQuestions instead of jlptN5Test for more accurate scoring
            if (window.currentTestQuestions) {
                Object.keys(window.currentTestQuestions).forEach(section => {
                    const sectionQuestions = window.currentTestQuestions[section];
                    if (!sectionQuestions || !Array.isArray(sectionQuestions)) return;
                    
                    const sectionCorrect = sectionQuestions.filter(question => 
                        question && question.id && answers[question.id] && answers[question.id].correct
                    ).length;
                    
                    sectionScores[section] = {
                        correct: sectionCorrect,
                        total: sectionQuestions.length,
                        percentage: sectionQuestions.length > 0 ? Math.round((sectionCorrect / sectionQuestions.length) * 100) : 0
                    };
                    
                    totalCorrect += sectionCorrect;
                    totalQuestions += sectionQuestions.length;
                });
            } else {
                // Fallback to using the original data structure if needed
                Object.keys(window.jlptN5Test).forEach(section => {
                    const sectionQuestions = window.jlptN5Test[section];
                    if (!sectionQuestions || !Array.isArray(sectionQuestions)) return;
                    
                    const sectionCorrect = sectionQuestions.filter(question => 
                        question && question.id && answers[question.id] && answers[question.id].correct
                    ).length;
                    
                    sectionScores[section] = {
                        correct: sectionCorrect,
                        total: sectionQuestions.length,
                        percentage: sectionQuestions.length > 0 ? Math.round((sectionCorrect / sectionQuestions.length) * 100) : 0
                    };
                    
                    totalCorrect += sectionCorrect;
                    totalQuestions += sectionQuestions.length;
                });
            }
            
            const overallPercentage = Math.round((totalCorrect / totalQuestions) * 100) || 0;
            
            // Update the score displays
            document.querySelector('.total-score').textContent = `${overallPercentage}%`;
            document.querySelector('.correct-count').textContent = totalCorrect;
            document.querySelector('.total-count').textContent = totalQuestions;
            
            // Update each section score
            const sectionElements = document.querySelectorAll('.section-score');
            sectionElements.forEach((sectionEl, index) => {
                const sectionKey = Object.keys(jlptN5Test)[index];
                const score = sectionScores[sectionKey] || { correct: 0, total: 0 };
                
                sectionEl.querySelector('.section-correct').textContent = score.correct;
                sectionEl.querySelector('.section-total').textContent = score.total;
            });
            
            // Show pass/fail message (60% is usually the passing threshold for JLPT)
            const passFailMessage = document.querySelector('.pass-fail-message');
            if (overallPercentage >= 60) {
                passFailMessage.textContent = "合格";
                passFailMessage.classList.add('text-green-400');
                passFailMessage.classList.remove('text-red-400');
            } else {
                passFailMessage.textContent = "不合格";
                passFailMessage.classList.add('text-red-400');
                passFailMessage.classList.remove('text-green-400');
            }
        }
        
        function resetTest() {
            // Reset state
            currentSection = "language-knowledge";
            currentQuestionIndices = {
                "language-knowledge": 0,
                "reading": 0,
                "listening": 0
            };
            answers = {};
            remainingTime = 25 * 60;
            
            // Reset UI
            switchSection("language-knowledge");
            updateProgress();
            
            // Re-setup navigation buttons
            setupNavigationButtons();
            
            // Restart timer
            clearInterval(testTimer);
            startTimer();
        }
        
        // Kanji flashcard functionality
        let currentKanjiIndex = 0;
        
        // Initialize Kanji flashcards
        document.getElementById('kanjiBtn').addEventListener('click', showKanjiMode);
        
        // Set up flashcard navigation
        document.getElementById('nextKanjiBtn').addEventListener('click', nextKanji);
        document.getElementById('prevKanjiBtn').addEventListener('click', prevKanji);
        document.getElementById('shuffleKanjiBtn').addEventListener('click', shuffleKanji);
        
        // Make the kanji card flippable
        document.getElementById('kanjiCard').addEventListener('click', () => {
            document.getElementById('kanjiCard').classList.toggle('flipped');
        });
        
        function showKanjiMode() {
            // Show main app and hide JLPT test
            document.getElementById('main-header').classList.remove('hidden');
            document.getElementById('jlpt-header').classList.add('hidden');
            document.getElementById('main-content').classList.remove('hidden');
            document.getElementById('jlpt-content').classList.add('hidden');
            
            // Update active button
            const studyBtn = document.getElementById('studyBtn');
            const quizBtn = document.getElementById('quizBtn');
            const jlptBtn = document.getElementById('jlptBtn');
            const kanjiBtn = document.getElementById('kanjiBtn');
            
            studyBtn.classList.remove('bg-primary', 'text-white');
            quizBtn.classList.remove('bg-primary', 'text-white');
            jlptBtn.classList.remove('bg-primary', 'text-white');
            kanjiBtn.classList.remove('bg-primary', 'text-white');
            
            studyBtn.classList.add('bg-white', 'dark:bg-gray-800', 'text-gray-900', 'dark:text-white', 'border', 'border-gray-300', 'dark:border-gray-700');
            quizBtn.classList.add('bg-white', 'dark:bg-gray-800', 'text-gray-900', 'dark:text-white', 'border', 'border-gray-300', 'dark:border-gray-700');
            jlptBtn.classList.add('bg-white', 'dark:bg-gray-800', 'text-gray-900', 'dark:text-white', 'border', 'border-gray-300', 'dark:border-gray-700');
            kanjiBtn.classList.add('bg-white', 'dark:bg-gray-800', 'text-gray-900', 'dark:text-white', 'border', 'border-gray-300', 'dark:border-gray-700');
            
            // Hide other modes
            document.getElementById('studyContent').classList.add('hidden');
            document.getElementById('quizContent').classList.add('hidden');
            
            // Show kanji mode
            const kanjiContent = document.getElementById('kanjiContent');
            kanjiContent.classList.remove('hidden');
            kanjiContent.style.marginBottom = '50px'; // Add margin to ensure content isn't cut off
            
            kanjiBtn.classList.remove('bg-white', 'dark:bg-gray-800', 'text-gray-900', 'dark:text-white', 'border', 'border-gray-300', 'dark:border-gray-700');
            kanjiBtn.classList.add('bg-primary', 'text-white');
            
            // Make sure the flashcard is showing the front
            document.getElementById('kanjiCard').classList.remove('flipped');
            
            // Reset to the first kanji or keep current position
            loadCurrentKanji();
            
            // Scroll to top to make sure we don't start at the bottom
            window.scrollTo(0, 0);
        }
        
        function loadCurrentKanji() {
            const kanji = n5Kanji[currentKanjiIndex];
            
            // Update front of card
            document.querySelector('.kanji-character').textContent = kanji.kanji;
            
            // Update back of card
            document.querySelector('.kanji-character-back').textContent = kanji.kanji;
            document.querySelector('.kanji-meaning').textContent = kanji.meaning;
            document.querySelector('.kanji-onyomi').textContent = kanji.readings.onyomi;
            document.querySelector('.kanji-kunyomi').textContent = kanji.readings.kunyomi;
            
            // Update reading info
            const readingsText = kanji.readings.kunyomi.split('、')[0] + ' / ' + kanji.readings.onyomi.split('、')[0];
            document.querySelector('.kanji-character-back').nextElementSibling.textContent = readingsText;
            
            // Update examples
            const examplesContainer = document.querySelector('.kanji-examples');
            examplesContainer.innerHTML = '';
            
            kanji.examples.forEach(example => {
                const listItem = document.createElement('li');
                listItem.className = 'example-item';
                listItem.innerHTML = `
                    <div class="flex justify-between">
                        <span class="example-word text-xl">${example.word}</span>
                        <span class="example-meaning text-gray-300">${example.meaning}</span>
                    </div>
                    <p class="example-reading text-base text-pink-300">${example.reading}</p>
                `;
                examplesContainer.appendChild(listItem);
            });
            
            // Update progress counter
            document.getElementById('kanjiProgress').textContent = `Card: ${currentKanjiIndex + 1}/${n5Kanji.length}`;
            
            // Enable/disable navigation buttons
            document.getElementById('prevKanjiBtn').disabled = currentKanjiIndex === 0;
            document.getElementById('prevKanjiBtn').classList.toggle('opacity-50', currentKanjiIndex === 0);
        }
        
        function nextKanji() {
            if (currentKanjiIndex < n5Kanji.length - 1) {
                currentKanjiIndex++;
                document.getElementById('kanjiCard').classList.remove('flipped');
                loadCurrentKanji();
            }
        }
        
        function prevKanji() {
            if (currentKanjiIndex > 0) {
                currentKanjiIndex--;
                document.getElementById('kanjiCard').classList.remove('flipped');
                loadCurrentKanji();
            }
        }
        
        function shuffleKanji() {
            // Shuffle the kanji array
            n5Kanji.sort(() => Math.random() - 0.5);
            currentKanjiIndex = 0;
            document.getElementById('kanjiCard').classList.remove('flipped');
            loadCurrentKanji();
        }
        
        // Add furigana to JLPT test content
        function addFuriganaToJLPT() {
            // Function to add ruby annotations to kanji
            function addFuriganaToText(text) {
                // Add ruby tags for common kanji used in the test
                const kanjiMap = {
                    '東京': '<ruby>東京<rt>とうきょう</rt></ruby>',
                    '会社': '<ruby>会社<rt>かいしゃ</rt></ruby>',
                    '駅': '<ruby>駅<rt>えき</rt></ruby>',
                    '家': '<ruby>家<rt>いえ</rt></ruby>',
                    '毎日': '<ruby>毎日<rt>まいにち</rt></ruby>',
                    '毎朝': '<ruby>毎朝<rt>まいあさ</rt></ruby>',
                    '時': '<ruby>時<rt>じ</rt></ruby>',
                    '分': '<ruby>分<rt>ふん</rt></ruby>',
                    '日本': '<ruby>日本<rt>にほん</rt></ruby>',
                    '日本語': '<ruby>日本語<rt>にほんご</rt></ruby>',
                    '学校': '<ruby>学校<rt>がっこう</rt></ruby>',
                    '友達': '<ruby>友達<rt>ともだち</rt></ruby>',
                    '映画': '<ruby>映画<rt>えいが</rt></ruby>',
                    '京都': '<ruby>京都<rt>きょうと</rt></ruby>',
                    '電車': '<ruby>電車<rt>でんしゃ</rt></ruby>',
                    '大阪': '<ruby>大阪<rt>おおさか</rt></ruby>',
                    '遠い': '<ruby>遠<rt>とお</rt></ruby>い',
                    '右': '<ruby>右<rt>みぎ</rt></ruby>',
                    '曲がって': '<ruby>曲<rt>ま</rt></ruby>がって',
                    '行く': '<ruby>行<rt>い</rt></ruby>く',
                    '出ます': '<ruby>出<rt>で</rt></ruby>ます',
                    '飯': '<ruby>飯<rt>はん</rt></ruby>',
                    '近く': '<ruby>近<rt>ちか</rt></ruby>く',
                    '田中': '<ruby>田中<rt>たなか</rt></ruby>',
                    '山田': '<ruby>山田<rt>やまだ</rt></ruby>',
                };
                
                // Replace kanji with ruby annotations
                Object.entries(kanjiMap).forEach(([kanji, ruby]) => {
                    text = text.replace(new RegExp(kanji, 'g'), ruby);
                });
                
                return text;
            }
            
            // Add furigana to questions when they are loaded
            const originalLoadCurrentQuestion = loadCurrentQuestion;
            
            loadCurrentQuestion = function() {
                originalLoadCurrentQuestion();
                
                // Get all text elements in the current question and add furigana
                const questionContainer = document.querySelector(`#${currentSection}-section .jlpt-card`);
                
                if (questionContainer) {
                    const textElements = questionContainer.querySelectorAll('.question-text p, .reading-text p, .question p, .conversation p');
                    
                    textElements.forEach(el => {
                        el.innerHTML = addFuriganaToText(el.innerHTML);
                    });
                    
                    // Add furigana to options
                    const options = questionContainer.querySelectorAll('.option span:last-child');
                    options.forEach(el => {
                        el.innerHTML = addFuriganaToText(el.innerHTML);
                    });
                }
            };
        }
        
        // Study streak system
        function initStreakSystem() {
            // Try to get streak data from localStorage
            try {
                let streakData = JSON.parse(localStorage.getItem('studyStreak') || '{}');
                
                // Initialize if empty
                if (!streakData.lastStudyDate) {
                    streakData = {
                        lastStudyDate: null,
                        currentStreak: 0,
                        longestStreak: 0,
                        studyDates: []
                    };
                    localStorage.setItem('studyStreak', JSON.stringify(streakData));
                }
                
                // Check if this is a new study day
                const today = new Date().toLocaleDateString();
                if (streakData.lastStudyDate !== today) {
                    const yesterday = new Date();
                    yesterday.setDate(yesterday.getDate() - 1);
                    const yesterdayStr = yesterday.toLocaleDateString();
                    
                    if (streakData.lastStudyDate === yesterdayStr) {
                        // Continuous streak
                        streakData.currentStreak++;
                    } else if (streakData.lastStudyDate !== today) {
                        // Streak broken (more than a day since last study)
                        streakData.currentStreak = 1;
                    }
                    
                    // Update longest streak if needed
                    if (streakData.currentStreak > streakData.longestStreak) {
                        streakData.longestStreak = streakData.currentStreak;
                    }
                    
                    // Update last study date to today
                    streakData.lastStudyDate = today;
                    
                    // Add today to study dates if not already there
                    if (!streakData.studyDates.includes(today)) {
                        streakData.studyDates.push(today);
                    }
                    
                    // Keep only last 30 days of study history
                    if (streakData.studyDates.length > 30) {
                        streakData.studyDates = streakData.studyDates.slice(-30);
                    }
                    
                    // Save updated streak data
                    localStorage.setItem('studyStreak', JSON.stringify(streakData));
                    
                    // Show streak notification if streak is significant
                    if (streakData.currentStreak >= 3) {
                        showStreakNotification(streakData.currentStreak);
                    }
                }
                
                // Add streak info to the page
                addStreakDisplay(streakData);
            } catch (e) {
                console.error("Error initializing streak system:", e);
                // Initialize with default values if there was an error
                const defaultStreakData = {
                    lastStudyDate: new Date().toLocaleDateString(),
                    currentStreak: 1,
                    longestStreak: 1,
                    studyDates: [new Date().toLocaleDateString()]
                };
                localStorage.setItem('studyStreak', JSON.stringify(defaultStreakData));
                addStreakDisplay(defaultStreakData);
            }
        }
        
        // Show streak notification to the user
        function showStreakNotification(streakCount) {
            const notificationContainer = document.createElement('div');
            notificationContainer.className = 'fixed bottom-4 right-4 bg-cyan-800 bg-opacity-90 text-white p-4 rounded-lg shadow-lg z-50 border border-cyan-400';
            notificationContainer.innerHTML = `
                <div class="flex items-center gap-3">
                    <div class="text-2xl">🔥</div>
                    <div>
                        <div class="font-bold">Study Streak: ${streakCount} days!</div>
                        <div class="text-sm">Keep going to maintain your streak</div>
                    </div>
                    <button class="ml-4 text-cyan-200 hover:text-white">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
            `;
            
            document.body.appendChild(notificationContainer);
            
            // Add close button functionality
            const closeButton = notificationContainer.querySelector('button');
            closeButton.addEventListener('click', () => {
                notificationContainer.remove();
            });
            
            // Auto-remove after 5 seconds
            setTimeout(() => {
                notificationContainer.style.opacity = '0';
                notificationContainer.style.transform = 'translateY(20px)';
                notificationContainer.style.transition = 'opacity 0.5s, transform 0.5s';
                setTimeout(() => {
                    notificationContainer.remove();
                }, 500);
            }, 5000);
        }
        
        // Add streak display to the page
        function addStreakDisplay(streakData) {
            // Create streak display container
            const streakDisplay = document.createElement('div');
            streakDisplay.className = 'flex items-center gap-2 text-sm text-cyan-300 mt-2';
            streakDisplay.innerHTML = `
                <div class="flex items-center">
                    <span class="text-lg mr-1">🔥</span>
                    <span>Streak: <strong>${streakData.currentStreak}</strong> days</span>
                </div>
                <span class="text-gray-500">|</span>
                <div>
                    <span>Best: <strong>${streakData.longestStreak}</strong> days</span>
                </div>
            `;
            
            // Add to the page (after search & filters)
            const progressFilterContainer = document.querySelector('.mt-2.flex.items-center.space-x-2');
            if (progressFilterContainer) {
                progressFilterContainer.after(streakDisplay);
            } else {
                // Fallback location if filter container not found
                const searchContainer = document.querySelector('.relative');
                if (searchContainer) {
                    searchContainer.after(streakDisplay);
                }
            }
            
            // Add simple calendar view for last 7 days
            const lastWeekDates = getLastWeekDates();
            const calendarContainer = document.createElement('div');
            calendarContainer.className = 'mt-3 flex justify-between items-center bg-opacity-20 bg-purple-900 rounded-lg p-2 border border-cyan-700';
            
            let calendarHTML = `<div class="text-xs text-cyan-300 mr-2">Last 7 days:</div>`;
            calendarHTML += `<div class="flex gap-1">`;
            
            lastWeekDates.forEach(date => {
                const dateStr = date.toLocaleDateString();
                const isStudyDay = streakData.studyDates.includes(dateStr);
                const isToday = dateStr === new Date().toLocaleDateString();
                
                // Create color classes based on whether user studied that day
                const bgColor = isStudyDay 
                    ? 'bg-cyan-700 text-white' 
                    : 'bg-gray-800 text-gray-400';
                
                const borderColor = isToday 
                    ? 'border-2 border-pink-500' 
                    : 'border border-gray-700';
                
                // Add day box
                calendarHTML += `
                    <div class="flex flex-col items-center">
                        <div class="text-xs text-gray-400">${date.toLocaleDateString(undefined, {weekday: 'short'}).charAt(0)}</div>
                        <div class="w-6 h-6 ${bgColor} ${borderColor} rounded-full flex items-center justify-center text-xs">
                            ${date.getDate()}
                        </div>
                    </div>
                `;
            });
            
            calendarHTML += `</div>`;
            calendarContainer.innerHTML = calendarHTML;
            
            // Add calendar after streak display
            streakDisplay.after(calendarContainer);
        }
        
        // Helper function to get the last 7 days
        function getLastWeekDates() {
            const dates = [];
            for (let i = 6; i >= 0; i--) {
                const date = new Date();
                date.setDate(date.getDate() - i);
                dates.push(date);
            }
            return dates;
        }

        // Wait for DOM to be fully loaded before initializing
document.addEventListener('DOMContentLoaded', function() {
    console.log("DOM fully loaded - initializing app components");
    
    // Initialize main app with immediate execution of critical functions
    try {
        console.log("Initializing grammar cards...");
        renderGrammarCards();
        console.log("Setting up image uploads...");
        setupImageUploads();
        console.log("Setting up progress tracking...");
        setupProgressTracking();
        console.log("Adding furigana to JLPT...");
        addFuriganaToJLPT();
        console.log("Initializing streak system...");
        initStreakSystem();
    } catch (e) {
        console.error("Error during initialization:", e);
    }
    
    // Set up tab navigation
    document.getElementById('studyBtn').addEventListener('click', function() {
        console.log("Study button clicked");
        showMainAppMode('study');
    });
    
    document.getElementById('quizBtn').addEventListener('click', function() {
        console.log("Quiz button clicked");
        showMainAppMode('quiz');
    });
    
    document.getElementById('jlptBtn').addEventListener('click', function() {
        console.log("JLPT button clicked");
        showJLPTMode();
    });
    
    document.getElementById('kanjiBtn').addEventListener('click', function() {
        console.log("Kanji button clicked");
        showKanjiMode();
    });
    
    document.getElementById('notesBtn').addEventListener('click', function() {
        console.log("Notes button clicked");
        showMainAppMode('notes');
    });
    
    // Initialize with Study mode active by default
    console.log("Setting initial mode to Study");
    showMainAppMode('study');
});

        // Function to handle showing notes
        function showNotesMode() {
            // Hide all other content sections
            document.getElementById('studyContent').classList.add('hidden');
            document.getElementById('quizContent').classList.add('hidden');
            document.getElementById('kanjiContent').classList.add('hidden');
            
            // Show notes content
            document.getElementById('notesContent').classList.remove('hidden');
            
            // Update active button styling
            const menuButtons = ['studyBtn', 'quizBtn', 'jlptBtn', 'kanjiBtn', 'notesBtn'];
            menuButtons.forEach(btnId => {
                const btn = document.getElementById(btnId);
                if (btnId === 'notesBtn') {
                    btn.classList.remove('bg-white', 'dark:bg-gray-800', 'text-gray-900', 'dark:text-white', 'border', 'border-gray-300', 'dark:border-gray-700');
                    btn.classList.add('bg-primary', 'text-white');
                } else {
                    btn.classList.remove('bg-primary', 'text-white');
                    btn.classList.add('bg-white', 'dark:bg-gray-800', 'text-gray-900', 'dark:text-white', 'border', 'border-gray-300', 'dark:border-gray-700');
                }
            });
            
            // Load saved notes
            loadNotes();
        }

        // Function to load notes from localStorage
        function loadNotes() {
            const notesContainer = document.getElementById('notesContainer');
            const noNotesMessage = document.getElementById('noNotesMessage');
            const filterSelect = document.getElementById('notesFilterSelect');
            
            // Clear container
            notesContainer.innerHTML = '';
            
            // Try to get saved notes from localStorage
            try {
                const savedNotes = JSON.parse(localStorage.getItem('grammarNotes') || '[]');
                
                if (savedNotes.length === 0) {
                    // If no notes, show the message
                    noNotesMessage.classList.remove('hidden');
                    notesContainer.classList.add('hidden');
                    return;
                }
                
                // We have notes, hide the message
                noNotesMessage.classList.add('hidden');
                notesContainer.classList.remove('hidden');
                
                // Populate filter options with unique grammar patterns
                const uniqueGrammarPoints = [...new Set(savedNotes.map(note => note.grammar))];
                
                // Clear existing options except "All Grammar Points"
                while (filterSelect.options.length > 1) {
                    filterSelect.remove(1);
                }
                
                // Add options for each unique grammar pattern
                uniqueGrammarPoints.forEach(grammar => {
                    const option = document.createElement('option');
                    option.value = grammar;
                    option.textContent = grammar;
                    filterSelect.appendChild(option);
                });
                
                // Get current filter value
                const currentFilter = filterSelect.value;
                
                // Filter notes if needed
                const notesToShow = currentFilter === 'all' 
                    ? savedNotes 
                    : savedNotes.filter(note => note.grammar === currentFilter);
                
                // Sort notes by date (newest first)
                notesToShow.sort((a, b) => new Date(b.date) - new Date(a.date));
                
                // Render notes
                notesToShow.forEach((note, index) => {
                    const noteElement = document.createElement('div');
                    noteElement.className = 'note-item border border-cyan-500 bg-opacity-20 bg-purple-900 rounded-lg p-4 relative';
                    noteElement.dataset.index = index;
                    
                    // Format date
                    const date = new Date(note.date);
                    const formattedDate = `${date.toLocaleDateString()} ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;
                    
                    noteElement.innerHTML = `
                        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-2">
                            <h3 class="text-lg font-medium text-cyan-300">${note.grammar}</h3>
                            <div class="text-sm text-gray-400">${formattedDate}</div>
                        </div>
                        <div class="mb-3">
                            <p class="text-white text-lg">${note.sentence}</p>
                        </div>
                        <div class="flex justify-end gap-2">
                            <button class="edit-note-btn text-xs px-3 py-1 rounded border border-cyan-500 text-cyan-300 hover:bg-cyan-900 hover:bg-opacity-30">
                                ✏️ Edit
                            </button>
                            <button class="delete-note-btn text-xs px-3 py-1 rounded border border-red-500 text-red-300 hover:bg-red-900 hover:bg-opacity-30">
                                🗑️ Delete
                            </button>
                        </div>
                    `;
                    
                    notesContainer.appendChild(noteElement);
                    
                    // Add event listeners for edit and delete buttons
                    const editBtn = noteElement.querySelector('.edit-note-btn');
                    const deleteBtn = noteElement.querySelector('.delete-note-btn');
                    
                    editBtn.addEventListener('click', (e) => {
                        e.stopPropagation();
                        editNote(note, index);
                    });
                    
                    deleteBtn.addEventListener('click', (e) => {
                        e.stopPropagation();
                        deleteNote(index);
                    });
                });
            } catch (e) {
                console.error("Error loading notes:", e);
                noNotesMessage.classList.remove('hidden');
                notesContainer.classList.add('hidden');
            }
        }

        // Function to edit a note
        function editNote(note, index) {
            const noteItem = document.querySelector(`.note-item[data-index="${index}"]`);
            const currentContent = noteItem.querySelector('p').textContent;
            
            // Replace the content with a textarea
            const textareaContainer = document.createElement('div');
            textareaContainer.className = 'mb-3 edit-container';
            textareaContainer.innerHTML = `
                <textarea class="w-full p-3 bg-opacity-30 bg-purple-900 border border-cyan-500 rounded-lg text-base text-white"
                    rows="3">${currentContent}</textarea>
                <div class="flex justify-end mt-2 gap-2">
                    <button class="cancel-edit-btn text-xs px-3 py-1 rounded border border-gray-500 text-gray-300">
                        Cancel
                    </button>
                    <button class="save-edit-btn text-xs px-3 py-1 rounded bg-opacity-20 bg-green-900 border border-green-500 text-green-300">
                        Save
                    </button>
                </div>
            `;
            
            // Replace paragraph with textarea
            noteItem.querySelector('p').parentNode.replaceWith(textareaContainer);
            
            // Hide the regular edit/delete buttons while editing
            noteItem.querySelector('.edit-note-btn').style.display = 'none';
            noteItem.querySelector('.delete-note-btn').style.display = 'none';
            
            // Add event listeners
            const cancelBtn = textareaContainer.querySelector('.cancel-edit-btn');
            const saveBtn = textareaContainer.querySelector('.save-edit-btn');
            
            cancelBtn.addEventListener('click', () => {
                // Just reload notes to cancel edit
                loadNotes();
            });
            
            saveBtn.addEventListener('click', () => {
                const newText = textareaContainer.querySelector('textarea').value.trim();
                
                if (newText) {
                    try {
                        // Get all notes
                        const savedNotes = JSON.parse(localStorage.getItem('grammarNotes') || '[]');
                        
                        // Find the note with matching date (unique identifier)
                        const noteIndex = savedNotes.findIndex(savedNote => 
                            savedNote.date === note.date && 
                            savedNote.grammar === note.grammar);
                        
                        if (noteIndex !== -1) {
                            // Update the sentence
                            savedNotes[noteIndex].sentence = newText;
                            
                            // Save back to localStorage
                            localStorage.setItem('grammarNotes', JSON.stringify(savedNotes));
                            
                            // Reload notes to reflect changes
                            loadNotes();
                        }
                    } catch (e) {
                        console.error("Error saving edited note:", e);
                    }
                }
            });
        }

        // Function to delete a note
        function deleteNote(index) {
            if (confirm('Are you sure you want to delete this note?')) {
                try {
                    // Get the note element
                    const noteItem = document.querySelector(`.note-item[data-index="${index}"]`);
                    const grammar = noteItem.querySelector('h3').textContent;
                    
                    // Get all notes
                    const savedNotes = JSON.parse(localStorage.getItem('grammarNotes') || '[]');
                    
                    // Delete the note with matching index in the filtered list
                    // This is a bit complex because our index is from the filtered/displayed list
                    const currentFilter = document.getElementById('notesFilterSelect').value;
                    
                    // Filter notes based on current filter
                    const filteredNotes = currentFilter === 'all' 
                        ? savedNotes 
                        : savedNotes.filter(note => note.grammar === currentFilter);
                    
                    // Sort notes by date (newest first) to match display order
                    filteredNotes.sort((a, b) => new Date(b.date) - new Date(a.date));
                    
                    // Get the note from our filtered list
                    const noteToDelete = filteredNotes[index];
                    
                    // Find the index in the full list
                    const fullListIndex = savedNotes.findIndex(note => 
                        note.date === noteToDelete.date && 
                        note.grammar === noteToDelete.grammar && 
                        note.sentence === noteToDelete.sentence);
                    
                    if (fullListIndex !== -1) {
                        // Remove the note
                        savedNotes.splice(fullListIndex, 1);
                        
                        // Save back to localStorage
                        localStorage.setItem('grammarNotes', JSON.stringify(savedNotes));
                        
                        // Reload notes to reflect changes
                        loadNotes();
                    }
                } catch (e) {
                    console.error("Error deleting note:", e);
                }
            }
        }

        // Set up filter change handler
        document.getElementById('notesFilterSelect').addEventListener('change', () => {
            loadNotes();
        });

        // Set up clear all notes handler
        document.getElementById('clearNotesBtn').addEventListener('click', () => {
            if (confirm('Are you sure you want to delete ALL your notes? This cannot be undone.')) {
                localStorage.removeItem('grammarNotes');
                loadNotes();
            }
        });

        // Add notes mode to the showMainAppMode function
        function showMainAppMode(mode) {
            // Show main app and hide JLPT test
            document.getElementById('main-header').classList.remove('hidden');
            document.getElementById('jlpt-header').classList.add('hidden');
            document.getElementById('main-content').classList.remove('hidden');
            document.getElementById('jlpt-content').classList.add('hidden');
            
            // Update active button
            const studyBtn = document.getElementById('studyBtn');
            const quizBtn = document.getElementById('quizBtn');
            const jlptBtn = document.getElementById('jlptBtn');
            const kanjiBtn = document.getElementById('kanjiBtn');
            const notesBtn = document.getElementById('notesBtn');
            
            studyBtn.classList.remove('bg-primary', 'text-white');
            quizBtn.classList.remove('bg-primary', 'text-white');
            jlptBtn.classList.remove('bg-primary', 'text-white');
            kanjiBtn.classList.remove('bg-primary', 'text-white');
            notesBtn.classList.remove('bg-primary', 'text-white');
            
            studyBtn.classList.add('bg-white', 'dark:bg-gray-800', 'text-gray-900', 'dark:text-white', 'border', 'border-gray-300', 'dark:border-gray-700');
            quizBtn.classList.add('bg-white', 'dark:bg-gray-800', 'text-gray-900', 'dark:text-white', 'border', 'border-gray-300', 'dark:border-gray-700');
            jlptBtn.classList.add('bg-white', 'dark:bg-gray-800', 'text-gray-900', 'dark:text-white', 'border', 'border-gray-300', 'dark:border-gray-700');
            kanjiBtn.classList.add('bg-white', 'dark:bg-gray-800', 'text-gray-900', 'dark:text-white', 'border', 'border-gray-300', 'dark:border-gray-700');
            notesBtn.classList.add('bg-white', 'dark:bg-gray-800', 'text-gray-900', 'dark:text-white', 'border', 'border-gray-300', 'dark:border-gray-700');
            
            // Hide all content sections
            document.getElementById('studyContent').classList.add('hidden');
            document.getElementById('quizContent').classList.add('hidden');
            document.getElementById('kanjiContent').classList.add('hidden');
            document.getElementById('notesContent').classList.add('hidden');
            
            // Show the selected mode
            if (mode === 'study') {
                document.getElementById('studyContent').classList.remove('hidden');
                studyBtn.classList.remove('bg-white', 'dark:bg-gray-800', 'text-gray-900', 'dark:text-white', 'border', 'border-gray-300', 'dark:border-gray-700');
                studyBtn.classList.add('bg-primary', 'text-white');
            } else if (mode === 'quiz') {
                document.getElementById('quizContent').classList.remove('hidden');
                quizBtn.classList.remove('bg-white', 'dark:bg-gray-800', 'text-gray-900', 'dark:text-white', 'border', 'border-gray-300', 'dark:border-gray-700');
                quizBtn.classList.add('bg-primary', 'text-white');
                
                // Start new quiz when switching to quiz mode
                startNewQuiz();
            } else if (mode === 'notes') {
                document.getElementById('notesContent').classList.remove('hidden');
                notesBtn.classList.remove('bg-white', 'dark:bg-gray-800', 'text-gray-900', 'dark:text-white', 'border', 'border-gray-300', 'dark:border-gray-700');
                notesBtn.classList.add('bg-primary', 'text-white');
                
                // Load notes when switching to notes mode
                loadNotes();
            }
        }
        
        // Practice Mode functionality
        let practiceScore = 0;
        const practiceData = [
            {
                english: "I go to school every day.",
                words: ["毎日", "学校に", "行きます"],
                answer: "毎日 学校に 行きます",
                grammar: "Basic sentence structure (Subject + Object + Verb)"
            },
            {
                english: "I ate sushi yesterday.",
                words: ["昨日", "寿司を", "食べました"],
                answer: "昨日 寿司を 食べました",
                grammar: "Past tense (~ました)"
            },
            {
                english: "I want to go to Japan.",
                words: ["日本に", "行きたいです"],
                answer: "日本に 行きたいです",
                grammar: "Expressing desire (~たい)"
            },
            {
                english: "My friend gave me a book.",
                words: ["友達は", "私に", "本を", "くれました"],
                answer: "友達は 私に 本を くれました",
                grammar: "Giving (~くれる)"
            },
            {
                english: "Please open the window.",
                words: ["窓を", "開けて", "ください"],
                answer: "窓を 開けて ください",
                grammar: "Polite requests (~てください)"
            },
            {
                english: "I'll go shopping with my mother.",
                words: ["母と", "買い物に", "行きます"],
                answer: "母と 買い物に 行きます",
                grammar: "Particle と (with)"
            },
            {
                english: "The train arrives at 3 o'clock.",
                words: ["電車は", "3時に", "着きます"],
                answer: "電車は 3時に 着きます",
                grammar: "Time expressions with に"
            },
            {
                english: "I study Japanese because it's interesting.",
                words: ["面白いから", "日本語を", "勉強します"],
                answer: "面白いから 日本語を 勉強します",
                grammar: "Reason/Cause (から)"
            },
            {
                english: "I read a book while drinking coffee.",
                words: ["コーヒーを", "飲みながら", "本を", "読みます"],
                answer: "コーヒーを 飲みながら 本を 読みます",
                grammar: "Simultaneous actions (~ながら)"
            },
            {
                english: "I think this restaurant's food is delicious.",
                words: ["この", "レストランの", "料理は", "美味しいと", "思います"],
                answer: "この レストランの 料理は 美味しいと 思います",
                grammar: "Quotation particle と"
            }
        ];
        
        let currentPracticeQuestion = null;
        
        // Initialize Practice Mode
        function initPracticeMode() {
            document.getElementById('practiceBtn').addEventListener('click', showPracticeMode);
            document.getElementById('newPracticeBtn').addEventListener('click', newPracticeQuestion);
            document.getElementById('checkPracticeBtn').addEventListener('click', checkPracticeAnswer);
            document.getElementById('clearPracticeBtn').addEventListener('click', clearPracticeAnswer);
            document.getElementById('nextPracticeBtn').addEventListener('click', newPracticeQuestion);
            
            // Set up drag and drop functionality
            setupDragAndDrop();
        }
        
        function showPracticeMode() {
            // Hide all other content sections
            document.getElementById('studyContent').classList.add('hidden');
            document.getElementById('quizContent').classList.add('hidden');
            document.getElementById('kanjiContent').classList.add('hidden');
            document.getElementById('notesContent').classList.add('hidden');
            
            // Show practice content
            document.getElementById('practiceContent').classList.remove('hidden');
            
            // Update active button styling
            const menuButtons = ['studyBtn', 'quizBtn', 'jlptBtn', 'kanjiBtn', 'notesBtn', 'practiceBtn'];
            menuButtons.forEach(btnId => {
                if (document.getElementById(btnId)) {
                    const btn = document.getElementById(btnId);
                    if (btnId === 'practiceBtn') {
                        btn.classList.remove('bg-white', 'dark:bg-gray-800', 'text-gray-900', 'dark:text-white', 'border', 'border-gray-300', 'dark:border-gray-700');
                        btn.classList.add('bg-primary', 'text-white');
                    } else {
                        btn.classList.remove('bg-primary', 'text-white');
                        btn.classList.add('bg-white', 'dark:bg-gray-800', 'text-gray-900', 'dark:text-white', 'border', 'border-gray-300', 'dark:border-gray-700');
                    }
                }
            });
            
            // Start a new practice question if none is active
            if (!currentPracticeQuestion) {
                newPracticeQuestion();
            }
        }
        
        function newPracticeQuestion() {
            // Hide feedback and next button
            document.getElementById('practiceFeedback').classList.add('hidden');
            document.getElementById('nextPracticeBtn').classList.add('hidden');
            
            // Generate a random question from practice data
            const randomIndex = Math.floor(Math.random() * practiceData.length);
            currentPracticeQuestion = practiceData[randomIndex];
            
            // Display the English sentence
            document.getElementById('practiceEnglish').textContent = currentPracticeQuestion.english;
            
            // Display grammar hint
            document.getElementById('practiceGrammarHint').querySelector('span').textContent = currentPracticeQuestion.grammar;
            
            // Clear the answer container
            clearPracticeAnswer();
            
            // Create and display the word components
            const wordContainer = document.getElementById('wordContainer');
            wordContainer.innerHTML = '';
            
            // Shuffle the words for randomness
            const shuffledWords = [...currentPracticeQuestion.words].sort(() => Math.random() - 0.5);
            
            shuffledWords.forEach(word => {
                const wordElement = document.createElement('div');
                wordElement.className = 'word-component bg-opacity-30 bg-cyan-900 border border-cyan-500 text-cyan-100 px-3 py-2 rounded-lg cursor-move';
                wordElement.textContent = word;
                wordElement.draggable = true;
                wordElement.dataset.word = word;
                
                // Add data attribute to mark it as available
                wordElement.dataset.placed = 'false';
                
                wordContainer.appendChild(wordElement);
            });
        }
        
        function setupDragAndDrop() {
            // Get the containers
            const wordContainer = document.getElementById('wordContainer');
            const answerContainer = document.getElementById('answerContainer');
            
            // Set up event delegation for drag and drop
            document.addEventListener('dragstart', function(e) {
                // Only handle word components
                if (e.target.classList.contains('word-component')) {
                    e.dataTransfer.setData('text/plain', e.target.dataset.word);
                    e.target.classList.add('dragging');
                    
                    // Store source container
                    e.dataTransfer.setData('source-container', e.target.parentNode.id);
                }
            });
            
            document.addEventListener('dragend', function(e) {
                if (e.target.classList.contains('word-component')) {
                    e.target.classList.remove('dragging');
                }
            });
            
            // Allow dropping in word container and answer container
            [wordContainer, answerContainer].forEach(container => {
                container.addEventListener('dragover', function(e) {
                    e.preventDefault();
                    e.dataTransfer.dropEffect = 'move';
                    this.classList.add('drag-over');
                });
                
                container.addEventListener('dragleave', function(e) {
                    this.classList.remove('drag-over');
                });
                
                container.addEventListener('drop', function(e) {
                    e.preventDefault();
                    this.classList.remove('drag-over');
                    
                    const word = e.dataTransfer.getData('text/plain');
                    const sourceContainerId = e.dataTransfer.getData('source-container');
                    
                    // If dropping in the same container, do nothing
                    if (this.id === sourceContainerId) {
                        return;
                    }
                    
                    // Find the original element
                    const sourceElement = document.querySelector(`#${sourceContainerId} .word-component[data-word="${word}"][data-placed="false"]`) || 
                                          document.querySelector(`#${sourceContainerId} .word-component[data-word="${word}"]`);
                    
                    if (!sourceElement) return;
                    
                    // If moving from word container to answer container
                    if (this.id === 'answerContainer') {
                        // Create a new element in the answer container
                        const newElement = document.createElement('div');
                        newElement.className = 'word-component bg-opacity-30 bg-purple-900 border border-purple-500 text-purple-100 px-3 py-2 rounded-lg cursor-move';
                        newElement.textContent = word;
                        newElement.draggable = true;
                        newElement.dataset.word = word;
                        this.appendChild(newElement);
                        
                        // Mark the original as placed
                        sourceElement.dataset.placed = 'true';
                        sourceElement.style.opacity = '0.5';
                        sourceElement.style.pointerEvents = 'none';
                        
                        // Remove the placeholder if it exists
                        const placeholder = this.querySelector('.empty-placeholder');
                        if (placeholder) {
                            placeholder.remove();
                        }
                    } 
                    // If moving from answer container to word container
                    else if (this.id === 'wordContainer') {
                        // Find the corresponding element in the word container that was previously placed
                        const originalElement = document.querySelector(`#wordContainer .word-component[data-word="${word}"][data-placed="true"]`);
                        
                        if (originalElement) {
                            // Reset the original element
                            originalElement.dataset.placed = 'false';
                            originalElement.style.opacity = '1';
                            originalElement.style.pointerEvents = 'auto';
                            
                            // Remove the element from the answer container
                            const answerElement = document.querySelector(`#answerContainer .word-component[data-word="${word}"]`);
                            if (answerElement) {
                                answerElement.remove();
                            }
                            
                            // Add placeholder if answer container is now empty
                            if (answerContainer.children.length === 0) {
                                const placeholder = document.createElement('div');
                                placeholder.className = 'empty-placeholder text-gray-500 text-sm';
                                placeholder.textContent = 'Drag words here to form a sentence';
                                answerContainer.appendChild(placeholder);
                            }
                        }
                    }
                });
            });
            
            // Allow clicking words to add/remove them as well (for mobile)
            document.addEventListener('click', function(e) {
                if (e.target.classList.contains('word-component')) {
                    const word = e.target.dataset.word;
                    const isPlaced = e.target.dataset.placed === 'true';
                    const sourceContainer = e.target.parentNode.id;
                    
                    // If clicking a word in the word container that isn't placed yet
                    if (sourceContainer === 'wordContainer' && !isPlaced) {
                        // Create a new element in the answer container
                        const newElement = document.createElement('div');
                        newElement.className = 'word-component bg-opacity-30 bg-purple-900 border border-purple-500 text-purple-100 px-3 py-2 rounded-lg cursor-move';
                        newElement.textContent = word;
                        newElement.draggable = true;
                        newElement.dataset.word = word;
                        answerContainer.appendChild(newElement);
                        
                        // Mark the original as placed
                        e.target.dataset.placed = 'true';
                        e.target.style.opacity = '0.5';
                        e.target.style.pointerEvents = 'none';
                        
                        // Remove the placeholder if it exists
                        const placeholder = answerContainer.querySelector('.empty-placeholder');
                        if (placeholder) {
                            placeholder.remove();
                        }
                    } 
                    // If clicking a word in the answer container
                    else if (sourceContainer === 'answerContainer') {
                        // Find the corresponding element in the word container
                        const originalElement = document.querySelector(`#wordContainer .word-component[data-word="${word}"][data-placed="true"]`);
                        
                        if (originalElement) {
                            // Reset the original element
                            originalElement.dataset.placed = 'false';
                            originalElement.style.opacity = '1';
                            originalElement.style.pointerEvents = 'auto';
                            
                            // Remove the clicked element
                            e.target.remove();
                            
                            // Add placeholder if answer container is now empty
                            if (answerContainer.children.length === 0) {
                                const placeholder = document.createElement('div');
                                placeholder.className = 'empty-placeholder text-gray-500 text-sm';
                                placeholder.textContent = 'Drag words here to form a sentence';
                                answerContainer.appendChild(placeholder);
                            }
                        }
                    }
                }
            });
        }
        
        function checkPracticeAnswer() {
            // Get the user's answer
            const answerContainer = document.getElementById('answerContainer');
            const wordElements = answerContainer.querySelectorAll('.word-component');
            
            // If there's a placeholder, there's no answer yet
            if (answerContainer.querySelector('.empty-placeholder')) {
                showPracticeFeedback(false, 'Please arrange the words to form a sentence.');
                return;
            }
            
            // Construct the user's answer
            const userAnswer = Array.from(wordElements)
                .map(el => el.textContent)
                .join(' ');
            
            // Check if the answer is correct
            const isCorrect = userAnswer === currentPracticeQuestion.answer;
            
            // Update score if correct
            if (isCorrect) {
                practiceScore++;
                document.getElementById('practiceScore').textContent = `Score: ${practiceScore}`;
            }
            
            // Show feedback
            showPracticeFeedback(isCorrect, userAnswer);
        }
        
        function showPracticeFeedback(isCorrect, userAnswer) {
            const feedbackElement = document.getElementById('practiceFeedback');
            const nextButton = document.getElementById('nextPracticeBtn');
            
            // Prepare feedback message
            let feedbackHTML = '';
            
            if (isCorrect) {
                feedbackHTML = `
                    <div class="p-4 bg-opacity-20 bg-green-900 border border-green-500 rounded-lg">
                        <p class="text-green-300 font-bold mb-2">✓ Correct!</p>
                        <p class="text-white">Your answer: ${userAnswer}</p>
                    </div>
                `;
            } else {
                feedbackHTML = `
                    <div class="p-4 bg-opacity-20 bg-red-900 border border-red-500 rounded-lg">
                        <p class="text-red-300 font-bold mb-2">✗ Not quite right.</p>
                        <p class="text-white mb-2">Your answer: ${userAnswer}</p>
                        <p class="text-white">Correct answer: ${currentPracticeQuestion.answer}</p>
                    </div>
                `;
            }
            
            // Show the feedback
            feedbackElement.innerHTML = feedbackHTML;
            feedbackElement.classList.remove('hidden');
            
            // Show the next button
            nextButton.classList.remove('hidden');
            
            // Disable the check and clear buttons
            document.getElementById('checkPracticeBtn').disabled = true;
            document.getElementById('clearPracticeBtn').disabled = true;
        }
        
        function clearPracticeAnswer() {
            // Get containers
            const wordContainer = document.getElementById('wordContainer');
            const answerContainer = document.getElementById('answerContainer');
            
            // Clear the answer container
            answerContainer.innerHTML = '<div class="empty-placeholder text-gray-500 text-sm">Drag words here to form a sentence</div>';
            
            // Reset all word components in the word container
            const wordElements = wordContainer.querySelectorAll('.word-component');
            wordElements.forEach(el => {
                el.dataset.placed = 'false';
                el.style.opacity = '1';
                el.style.pointerEvents = 'auto';
            });
            
            // Re-enable buttons that might have been disabled
            document.getElementById('checkPracticeBtn').disabled = false;
            document.getElementById('clearPracticeBtn').disabled = false;
            
            // Hide feedback and next button
            document.getElementById('practiceFeedback').classList.add('hidden');
            document.getElementById('nextPracticeBtn').classList.add('hidden');
        }
        
        // Create Practice Button if it doesn't exist yet
        function createPracticeButton() {
            // Check if the practice button already exists
            if (!document.getElementById('practiceBtn')) {
                // Get the button grid
                const buttonGrid = document.querySelector('.grid.grid-cols-5.gap-2');
                
                if (buttonGrid) {
                    // Create a new practice button
                    const practiceBtn = document.createElement('button');
                    practiceBtn.id = 'practiceBtn';
                    practiceBtn.className = 'bg-white dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-900 dark:text-white font-medium py-4 px-4 rounded-lg border border-gray-300 dark:border-gray-700 transition duration-200 focus:outline-none text-center';
                    practiceBtn.textContent = 'Practice';
                    
                    // Adjust the grid to accommodate the new button
                    buttonGrid.classList.remove('grid-cols-5');
                    buttonGrid.classList.add('grid-cols-6');
                    
                    // Add the button to the grid
                    buttonGrid.appendChild(practiceBtn);
                    
                    // Add event listener
                    practiceBtn.addEventListener('click', showPracticeMode);
                }
            }
        }
        
        // Add Practice Mode to showMainAppMode function
        const originalShowMainAppMode = showMainAppMode;
        showMainAppMode = function(mode) {
            // Call the original function
            originalShowMainAppMode(mode);
            
            // Additional handling for practice mode
            if (mode === 'practice') {
                document.getElementById('practiceContent').classList.remove('hidden');
                const practiceBtn = document.getElementById('practiceBtn');
                if (practiceBtn) {
                    practiceBtn.classList.remove('bg-white', 'dark:bg-gray-800', 'text-gray-900', 'dark:text-white', 'border', 'border-gray-300', 'dark:border-gray-700');
                    practiceBtn.classList.add('bg-primary', 'text-white');
                }
                
                // Initialize practice question if needed
                if (!currentPracticeQuestion) {
                    newPracticeQuestion();
                }
            } else {
                // Hide practice content for other modes
                document.getElementById('practiceContent').classList.add('hidden');
            }
        };
        
        // Initialize Practice Mode
        createPracticeButton();
        initPracticeMode();
        
        // Set Study Mode as active by default
        showMainAppMode('study');
    </script>


</body></html>
